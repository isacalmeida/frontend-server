{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Documentos/workspaces/isac/frontend-server/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:/Documentos/workspaces/isac/frontend-server/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Documentos/workspaces/isac/frontend-server/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Input, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { RippleModule } from 'primeng/ripple';\nimport { SharedModule } from 'primeng/api';\n\nvar Paginator = /*#__PURE__*/function () {\n  function Paginator(cd) {\n    _classCallCheck(this, Paginator);\n\n    this.cd = cd;\n    this.pageLinkSize = 5;\n    this.onPageChange = new EventEmitter();\n    this.alwaysShow = true;\n    this.dropdownScrollHeight = '200px';\n    this.currentPageReportTemplate = '{currentPage} of {totalPages}';\n    this.totalRecords = 0;\n    this.rows = 0;\n    this.showPageLinks = true;\n    this._first = 0;\n    this._page = 0;\n  }\n\n  _createClass(Paginator, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.updatePaginatorState();\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(simpleChange) {\n      if (simpleChange.totalRecords) {\n        this.updatePageLinks();\n        this.updatePaginatorState();\n        this.updateFirst();\n        this.updateRowsPerPageOptions();\n      }\n\n      if (simpleChange.first) {\n        this._first = simpleChange.first.currentValue;\n        this.updatePageLinks();\n        this.updatePaginatorState();\n      }\n\n      if (simpleChange.rows) {\n        this.updatePageLinks();\n        this.updatePaginatorState();\n      }\n\n      if (simpleChange.rowsPerPageOptions) {\n        this.updateRowsPerPageOptions();\n      }\n    }\n  }, {\n    key: \"updateRowsPerPageOptions\",\n    value: function updateRowsPerPageOptions() {\n      if (this.rowsPerPageOptions) {\n        this.rowsPerPageItems = [];\n\n        var _iterator = _createForOfIteratorHelper(this.rowsPerPageOptions),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var opt = _step.value;\n\n            if (typeof opt == 'object' && opt['showAll']) {\n              this.rowsPerPageItems.unshift({\n                label: opt['showAll'],\n                value: this.totalRecords\n              });\n            } else {\n              this.rowsPerPageItems.push({\n                label: String(opt),\n                value: opt\n              });\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  }, {\n    key: \"isFirstPage\",\n    value: function isFirstPage() {\n      return this.getPage() === 0;\n    }\n  }, {\n    key: \"isLastPage\",\n    value: function isLastPage() {\n      return this.getPage() === this.getPageCount() - 1;\n    }\n  }, {\n    key: \"getPageCount\",\n    value: function getPageCount() {\n      return Math.ceil(this.totalRecords / this.rows) || 1;\n    }\n  }, {\n    key: \"calculatePageLinkBoundaries\",\n    value: function calculatePageLinkBoundaries() {\n      var numberOfPages = this.getPageCount(),\n          visiblePages = Math.min(this.pageLinkSize, numberOfPages); //calculate range, keep current in middle if necessary\n\n      var start = Math.max(0, Math.ceil(this.getPage() - visiblePages / 2)),\n          end = Math.min(numberOfPages - 1, start + visiblePages - 1); //check when approaching to last page\n\n      var delta = this.pageLinkSize - (end - start + 1);\n      start = Math.max(0, start - delta);\n      return [start, end];\n    }\n  }, {\n    key: \"updatePageLinks\",\n    value: function updatePageLinks() {\n      this.pageLinks = [];\n      var boundaries = this.calculatePageLinkBoundaries(),\n          start = boundaries[0],\n          end = boundaries[1];\n\n      for (var i = start; i <= end; i++) {\n        this.pageLinks.push(i + 1);\n      }\n\n      if (this.showJumpToPageDropdown) {\n        this.pageItems = [];\n\n        for (var _i = 0; _i < this.getPageCount(); _i++) {\n          this.pageItems.push({\n            label: String(_i + 1),\n            value: _i\n          });\n        }\n      }\n    }\n  }, {\n    key: \"changePage\",\n    value: function changePage(p) {\n      var pc = this.getPageCount();\n\n      if (p >= 0 && p < pc) {\n        this._first = this.rows * p;\n        var state = {\n          page: p,\n          first: this.first,\n          rows: this.rows,\n          pageCount: pc\n        };\n        this.updatePageLinks();\n        this.onPageChange.emit(state);\n        this.updatePaginatorState();\n      }\n    }\n  }, {\n    key: \"updateFirst\",\n    value: function updateFirst() {\n      var _this = this;\n\n      var page = this.getPage();\n\n      if (page > 0 && this.totalRecords && this.first >= this.totalRecords) {\n        Promise.resolve(null).then(function () {\n          return _this.changePage(page - 1);\n        });\n      }\n    }\n  }, {\n    key: \"getPage\",\n    value: function getPage() {\n      return Math.floor(this.first / this.rows);\n    }\n  }, {\n    key: \"changePageToFirst\",\n    value: function changePageToFirst(event) {\n      if (!this.isFirstPage()) {\n        this.changePage(0);\n      }\n\n      event.preventDefault();\n    }\n  }, {\n    key: \"changePageToPrev\",\n    value: function changePageToPrev(event) {\n      this.changePage(this.getPage() - 1);\n      event.preventDefault();\n    }\n  }, {\n    key: \"changePageToNext\",\n    value: function changePageToNext(event) {\n      this.changePage(this.getPage() + 1);\n      event.preventDefault();\n    }\n  }, {\n    key: \"changePageToLast\",\n    value: function changePageToLast(event) {\n      if (!this.isLastPage()) {\n        this.changePage(this.getPageCount() - 1);\n      }\n\n      event.preventDefault();\n    }\n  }, {\n    key: \"onPageLinkClick\",\n    value: function onPageLinkClick(event, page) {\n      this.changePage(page);\n      event.preventDefault();\n    }\n  }, {\n    key: \"onRppChange\",\n    value: function onRppChange(event) {\n      this.changePage(this.getPage());\n    }\n  }, {\n    key: \"onPageDropdownChange\",\n    value: function onPageDropdownChange(event) {\n      this.changePage(event.value);\n    }\n  }, {\n    key: \"updatePaginatorState\",\n    value: function updatePaginatorState() {\n      this.paginatorState = {\n        page: this.getPage(),\n        pageCount: this.getPageCount(),\n        rows: this.rows,\n        first: this.first,\n        totalRecords: this.totalRecords\n      };\n    }\n  }, {\n    key: \"first\",\n    get: function get() {\n      return this._first;\n    },\n    set: function set(val) {\n      this._first = val;\n    }\n  }, {\n    key: \"currentPageReport\",\n    get: function get() {\n      return this.currentPageReportTemplate.replace(\"{currentPage}\", String(this.getPage() + 1)).replace(\"{totalPages}\", String(this.getPageCount())).replace(\"{first}\", String(this._first + 1)).replace(\"{last}\", String(Math.min(this._first + this.rows, this.totalRecords))).replace(\"{rows}\", String(this.rows)).replace(\"{totalRecords}\", String(this.totalRecords));\n    }\n  }]);\n\n  return Paginator;\n}();\n\nPaginator.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'p-paginator',\n    template: \"\\n        <div [class]=\\\"styleClass\\\" [ngStyle]=\\\"style\\\" [ngClass]=\\\"'p-paginator p-component'\\\" *ngIf=\\\"alwaysShow ? true : (pageLinks && pageLinks.length > 1)\\\">\\n            <div class=\\\"p-paginator-left-content\\\" *ngIf=\\\"templateLeft\\\">\\n                <ng-container *ngTemplateOutlet=\\\"templateLeft; context: {$implicit: paginatorState}\\\"></ng-container>\\n            </div>\\n            <span class=\\\"p-paginator-current\\\" *ngIf=\\\"showCurrentPageReport\\\">{{currentPageReport}}</span>\\n            <button type=\\\"button\\\" [disabled]=\\\"isFirstPage()\\\" (click)=\\\"changePageToFirst($event)\\\" pRipple\\n                    class=\\\"p-paginator-first p-paginator-element p-link\\\" [ngClass]=\\\"{'p-disabled':isFirstPage()}\\\">\\n                <span class=\\\"p-paginator-icon pi pi-angle-double-left\\\"></span>\\n            </button>\\n            <button type=\\\"button\\\" [disabled]=\\\"isFirstPage()\\\" (click)=\\\"changePageToPrev($event)\\\" pRipple\\n                    class=\\\"p-paginator-prev p-paginator-element p-link\\\" [ngClass]=\\\"{'p-disabled':isFirstPage()}\\\">\\n                <span class=\\\"p-paginator-icon pi pi-angle-left\\\"></span>\\n            </button>\\n            <span class=\\\"p-paginator-pages\\\" *ngIf=\\\"showPageLinks\\\">\\n                <button type=\\\"button\\\" *ngFor=\\\"let pageLink of pageLinks\\\" class=\\\"p-paginator-page p-paginator-element p-link\\\" [ngClass]=\\\"{'p-highlight': (pageLink-1 == getPage())}\\\"\\n                    (click)=\\\"onPageLinkClick($event, pageLink - 1)\\\" pRipple>{{pageLink}}</button>\\n            </span>\\n            <p-dropdown [options]=\\\"pageItems\\\" [ngModel]=\\\"getPage()\\\" *ngIf=\\\"showJumpToPageDropdown\\\"  styleClass=\\\"p-paginator-page-options\\\"\\n                (onChange)=\\\"onPageDropdownChange($event)\\\" [appendTo]=\\\"dropdownAppendTo\\\" [scrollHeight]=\\\"dropdownScrollHeight\\\">\\n                <ng-template pTemplate=\\\"selectedItem\\\">{{currentPageReport}}</ng-template>\\n            </p-dropdown>\\n            <button type=\\\"button\\\" [disabled]=\\\"isLastPage()\\\" (click)=\\\"changePageToNext($event)\\\" pRipple\\n                    class=\\\"p-paginator-next p-paginator-element p-link\\\" [ngClass]=\\\"{'p-disabled':isLastPage()}\\\">\\n                <span class=\\\"p-paginator-icon pi pi-angle-right\\\"></span>\\n            </button>\\n            <button type=\\\"button\\\" [disabled]=\\\"isLastPage()\\\" (click)=\\\"changePageToLast($event)\\\" pRipple\\n                    class=\\\"p-paginator-last p-paginator-element p-link\\\" [ngClass]=\\\"{'p-disabled':isLastPage()}\\\">\\n                <span class=\\\"p-paginator-icon pi pi-angle-double-right\\\"></span>\\n            </button>\\n            <p-dropdown [options]=\\\"rowsPerPageItems\\\" [(ngModel)]=\\\"rows\\\" *ngIf=\\\"rowsPerPageOptions\\\" styleClass=\\\"p-paginator-rpp-options\\\"\\n                (onChange)=\\\"onRppChange($event)\\\" [appendTo]=\\\"dropdownAppendTo\\\" [scrollHeight]=\\\"dropdownScrollHeight\\\"></p-dropdown>\\n            <div class=\\\"p-paginator-right-content\\\" *ngIf=\\\"templateRight\\\">\\n                <ng-container *ngTemplateOutlet=\\\"templateRight; context: {$implicit: paginatorState}\\\"></ng-container>\\n            </div>\\n        </div>\\n    \",\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styles: [\".p-paginator{-ms-flex-align:center;-ms-flex-pack:center;-ms-flex-wrap:wrap;align-items:center;display:-ms-flexbox;display:flex;flex-wrap:wrap;justify-content:center}.p-paginator-left-content{margin-right:auto}.p-paginator-right-content{margin-left:auto}.p-paginator-current,.p-paginator-first,.p-paginator-last,.p-paginator-next,.p-paginator-page,.p-paginator-prev{-moz-user-select:none;-ms-flex-align:center;-ms-flex-pack:center;-ms-user-select:none;-webkit-user-select:none;align-items:center;cursor:pointer;display:-ms-inline-flexbox;display:inline-flex;justify-content:center;line-height:1;overflow:hidden;position:relative;user-select:none}.p-paginator-element:focus{position:relative;z-index:1}\"]\n  }]\n}];\n\nPaginator.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }];\n};\n\nPaginator.propDecorators = {\n  pageLinkSize: [{\n    type: Input\n  }],\n  onPageChange: [{\n    type: Output\n  }],\n  style: [{\n    type: Input\n  }],\n  styleClass: [{\n    type: Input\n  }],\n  alwaysShow: [{\n    type: Input\n  }],\n  templateLeft: [{\n    type: Input\n  }],\n  templateRight: [{\n    type: Input\n  }],\n  dropdownAppendTo: [{\n    type: Input\n  }],\n  dropdownScrollHeight: [{\n    type: Input\n  }],\n  currentPageReportTemplate: [{\n    type: Input\n  }],\n  showCurrentPageReport: [{\n    type: Input\n  }],\n  totalRecords: [{\n    type: Input\n  }],\n  rows: [{\n    type: Input\n  }],\n  rowsPerPageOptions: [{\n    type: Input\n  }],\n  showJumpToPageDropdown: [{\n    type: Input\n  }],\n  showPageLinks: [{\n    type: Input\n  }],\n  first: [{\n    type: Input\n  }]\n};\n\nvar PaginatorModule = function PaginatorModule() {\n  _classCallCheck(this, PaginatorModule);\n};\n\nPaginatorModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, DropdownModule, FormsModule, SharedModule, RippleModule],\n    exports: [Paginator, DropdownModule, FormsModule, SharedModule],\n    declarations: [Paginator]\n  }]\n}];\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Paginator, PaginatorModule };","map":{"version":3,"sources":["../../src/app/components/paginator/paginator.ts","../../src/app/components/paginator/primeng-paginator.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,OnInit,Input,Output,ChangeDetectorRef,EventEmitter,TemplateRef,OnChanges,SimpleChanges,ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {DropdownModule} from 'primeng/dropdown';\nimport {SelectItem} from 'primeng/api';\nimport {RippleModule} from 'primeng/ripple';\nimport {SharedModule} from 'primeng/api';\n\n@Component({\n    selector: 'p-paginator',\n    template: `\n        <div [class]=\"styleClass\" [ngStyle]=\"style\" [ngClass]=\"'p-paginator p-component'\" *ngIf=\"alwaysShow ? true : (pageLinks && pageLinks.length > 1)\">\n            <div class=\"p-paginator-left-content\" *ngIf=\"templateLeft\">\n                <ng-container *ngTemplateOutlet=\"templateLeft; context: {$implicit: paginatorState}\"></ng-container>\n            </div>\n            <span class=\"p-paginator-current\" *ngIf=\"showCurrentPageReport\">{{currentPageReport}}</span>\n            <button type=\"button\" [disabled]=\"isFirstPage()\" (click)=\"changePageToFirst($event)\" pRipple\n                    class=\"p-paginator-first p-paginator-element p-link\" [ngClass]=\"{'p-disabled':isFirstPage()}\">\n                <span class=\"p-paginator-icon pi pi-angle-double-left\"></span>\n            </button>\n            <button type=\"button\" [disabled]=\"isFirstPage()\" (click)=\"changePageToPrev($event)\" pRipple\n                    class=\"p-paginator-prev p-paginator-element p-link\" [ngClass]=\"{'p-disabled':isFirstPage()}\">\n                <span class=\"p-paginator-icon pi pi-angle-left\"></span>\n            </button>\n            <span class=\"p-paginator-pages\" *ngIf=\"showPageLinks\">\n                <button type=\"button\" *ngFor=\"let pageLink of pageLinks\" class=\"p-paginator-page p-paginator-element p-link\" [ngClass]=\"{'p-highlight': (pageLink-1 == getPage())}\"\n                    (click)=\"onPageLinkClick($event, pageLink - 1)\" pRipple>{{pageLink}}</button>\n            </span>\n            <p-dropdown [options]=\"pageItems\" [ngModel]=\"getPage()\" *ngIf=\"showJumpToPageDropdown\"  styleClass=\"p-paginator-page-options\"\n                (onChange)=\"onPageDropdownChange($event)\" [appendTo]=\"dropdownAppendTo\" [scrollHeight]=\"dropdownScrollHeight\">\n                <ng-template pTemplate=\"selectedItem\">{{currentPageReport}}</ng-template>\n            </p-dropdown>\n            <button type=\"button\" [disabled]=\"isLastPage()\" (click)=\"changePageToNext($event)\" pRipple\n                    class=\"p-paginator-next p-paginator-element p-link\" [ngClass]=\"{'p-disabled':isLastPage()}\">\n                <span class=\"p-paginator-icon pi pi-angle-right\"></span>\n            </button>\n            <button type=\"button\" [disabled]=\"isLastPage()\" (click)=\"changePageToLast($event)\" pRipple\n                    class=\"p-paginator-last p-paginator-element p-link\" [ngClass]=\"{'p-disabled':isLastPage()}\">\n                <span class=\"p-paginator-icon pi pi-angle-double-right\"></span>\n            </button>\n            <p-dropdown [options]=\"rowsPerPageItems\" [(ngModel)]=\"rows\" *ngIf=\"rowsPerPageOptions\" styleClass=\"p-paginator-rpp-options\"\n                (onChange)=\"onRppChange($event)\" [appendTo]=\"dropdownAppendTo\" [scrollHeight]=\"dropdownScrollHeight\"></p-dropdown>\n            <div class=\"p-paginator-right-content\" *ngIf=\"templateRight\">\n                <ng-container *ngTemplateOutlet=\"templateRight; context: {$implicit: paginatorState}\"></ng-container>\n            </div>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./paginator.css']\n})\nexport class Paginator implements OnInit, OnChanges {\n\n    @Input() pageLinkSize: number = 5;\n\n    @Output() onPageChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() alwaysShow: boolean = true;\n    \n    @Input() templateLeft: TemplateRef<any>;\n    \n    @Input() templateRight: TemplateRef<any>;\n\n    @Input() dropdownAppendTo: any;\n\n    @Input() dropdownScrollHeight: string = '200px';\n\n    @Input() currentPageReportTemplate: string = '{currentPage} of {totalPages}';\n\n    @Input() showCurrentPageReport: boolean;\n\n    @Input() totalRecords: number = 0;\n\n    @Input() rows: number = 0;\n    \n    @Input() rowsPerPageOptions: any[];\n\n    @Input() showJumpToPageDropdown: boolean;\n\n    @Input() showPageLinks: boolean = true;\n\n    pageLinks: number[];\n\n    pageItems: SelectItem[];\n\n    rowsPerPageItems: SelectItem[];\n    \n    paginatorState: any;\n\n    _first: number = 0;\n\n    _page: number = 0;\n\n    constructor(private cd: ChangeDetectorRef) {}\n    \n    ngOnInit() {\n        this.updatePaginatorState();\n    }\n\n    ngOnChanges(simpleChange: SimpleChanges) {\n        if (simpleChange.totalRecords) {\n            this.updatePageLinks();\n            this.updatePaginatorState();\n            this.updateFirst();\n            this.updateRowsPerPageOptions();\n        }\n\n        if (simpleChange.first) {\n            this._first = simpleChange.first.currentValue;\n            this.updatePageLinks();\n            this.updatePaginatorState();\n        }\n\n        if (simpleChange.rows) {\n            this.updatePageLinks();\n            this.updatePaginatorState();\n        }\n\n        if (simpleChange.rowsPerPageOptions) {\n            this.updateRowsPerPageOptions();\n        }\n    }\n\n    @Input() get first(): number {\n        return this._first;\n    }\n    set first(val:number) {\n        this._first = val;\n    }\n\n    updateRowsPerPageOptions() {\n        if (this.rowsPerPageOptions) {\n            this.rowsPerPageItems = [];\n            for (let opt of this.rowsPerPageOptions) {\n                if (typeof opt == 'object' && opt['showAll']) {\n                    this.rowsPerPageItems.unshift({label: opt['showAll'], value: this.totalRecords});\n                }\n                else {\n                    this.rowsPerPageItems.push({label: String(opt), value: opt});\n                }\n            }\n        }\n    }\n\n    isFirstPage() {\n        return this.getPage() === 0;\n    }\n\n    isLastPage() {\n        return this.getPage() === this.getPageCount() - 1;\n    }\n\n    getPageCount() {\n        return Math.ceil(this.totalRecords/this.rows)||1;\n    }\n\n    calculatePageLinkBoundaries() {\n        let numberOfPages = this.getPageCount(),\n        visiblePages = Math.min(this.pageLinkSize, numberOfPages);\n\n        //calculate range, keep current in middle if necessary\n        let start = Math.max(0, Math.ceil(this.getPage() - ((visiblePages) / 2))),\n        end = Math.min(numberOfPages - 1, start + visiblePages - 1);\n\n        //check when approaching to last page\n        var delta = this.pageLinkSize - (end - start + 1);\n        start = Math.max(0, start - delta);\n\n        return [start, end];\n    }\n\n    updatePageLinks() {\n        this.pageLinks = [];\n        let boundaries = this.calculatePageLinkBoundaries(),\n        start = boundaries[0],\n        end = boundaries[1];\n\n        for(let i = start; i <= end; i++) {\n            this.pageLinks.push(i + 1);\n        }\n\n        if (this.showJumpToPageDropdown) {\n            this.pageItems = [];\n            for (let i = 0; i < this.getPageCount(); i++) {\n                this.pageItems.push({label: String(i + 1), value: i});\n            }\n        }\n    }\n\n    changePage(p :number) {\n        var pc = this.getPageCount();\n\n        if (p >= 0 && p < pc) {\n            this._first = this.rows * p;\n            var state = {\n                page: p,\n                first: this.first,\n                rows: this.rows,\n                pageCount: pc\n            };\n            this.updatePageLinks();\n\n            this.onPageChange.emit(state);\n            this.updatePaginatorState();\n        }\n    }\n\n    updateFirst() {\n        const page = this.getPage();\n        if (page > 0 && this.totalRecords && (this.first >= this.totalRecords)) {\n            Promise.resolve(null).then(() => this.changePage(page - 1));\n        }\n    }\n\n    getPage(): number {\n        return Math.floor(this.first / this.rows);\n    }\n\n    changePageToFirst(event) {\n      if (!this.isFirstPage()){\n          this.changePage(0);\n      }\n\n      event.preventDefault();\n    }\n\n    changePageToPrev(event) {\n        this.changePage(this.getPage() - 1);\n        event.preventDefault();\n    }\n\n    changePageToNext(event) {\n        this.changePage(this.getPage()  + 1);\n        event.preventDefault();\n    }\n\n    changePageToLast(event) {\n      if (!this.isLastPage()){\n          this.changePage(this.getPageCount() - 1);\n      }\n\n      event.preventDefault();\n    }\n\n    onPageLinkClick(event, page) {\n        this.changePage(page);\n        event.preventDefault();\n    }\n\n    onRppChange(event) {\n        this.changePage(this.getPage());\n    }\n\n    onPageDropdownChange(event) {\n        this.changePage(event.value);\n    }\n    \n    updatePaginatorState() {\n        this.paginatorState = {\n            page: this.getPage(),\n            pageCount: this.getPageCount(),\n            rows: this.rows,\n            first: this.first,\n            totalRecords: this.totalRecords\n        }\n    }\n\n    get currentPageReport() {\n        return this.currentPageReportTemplate\n                .replace(\"{currentPage}\", String(this.getPage() + 1))\n                .replace(\"{totalPages}\", String(this.getPageCount()))\n                .replace(\"{first}\", String(this._first + 1))\n                .replace(\"{last}\", String(Math.min(this._first + this.rows, this.totalRecords)))\n                .replace(\"{rows}\", String(this.rows))\n                .replace(\"{totalRecords}\", String(this.totalRecords));\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,DropdownModule,FormsModule,SharedModule,RippleModule],\n    exports: [Paginator,DropdownModule,FormsModule,SharedModule],\n    declarations: [Paginator]\n})\nexport class PaginatorModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}
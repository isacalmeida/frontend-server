{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Documentos/workspaces/isac/frontend-server/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:/Documentos/workspaces/isac/frontend-server/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Documentos/workspaces/isac/frontend-server/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\nimport { forwardRef, EventEmitter, Component, Input, Output, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Renderer2, ChangeDetectorRef, NgZone, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { DomHandler } from 'primeng/dom';\nimport { ObjectUtils, FilterUtils } from 'primeng/utils';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { TooltipModule } from 'primeng/tooltip';\nimport { RippleModule } from 'primeng/ripple';\nvar DROPDOWN_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return Dropdown;\n  }),\n  multi: true\n};\n\nvar DropdownItem = /*#__PURE__*/function () {\n  function DropdownItem() {\n    _classCallCheck(this, DropdownItem);\n\n    this.onClick = new EventEmitter();\n  }\n\n  _createClass(DropdownItem, [{\n    key: \"onOptionClick\",\n    value: function onOptionClick(event) {\n      this.onClick.emit({\n        originalEvent: event,\n        option: this.option\n      });\n    }\n  }]);\n\n  return DropdownItem;\n}();\n\nDropdownItem.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'p-dropdownItem',\n    template: \"\\n        <li (click)=\\\"onOptionClick($event)\\\" role=\\\"option\\\" pRipple\\n            [attr.aria-label]=\\\"option.label\\\" [attr.aria-selected]=\\\"selected\\\"\\n            [ngStyle]=\\\"{'height': itemSize + 'px'}\\\"\\n            [ngClass]=\\\"{'p-dropdown-item':true, 'p-highlight': selected, 'p-disabled':(option.disabled)}\\\">\\n            <span *ngIf=\\\"!template\\\">{{option.label||'empty'}}</span>\\n            <ng-container *ngTemplateOutlet=\\\"template; context: {$implicit: option}\\\"></ng-container>\\n        </li>\\n    \"\n  }]\n}];\nDropdownItem.propDecorators = {\n  option: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  visible: [{\n    type: Input\n  }],\n  itemSize: [{\n    type: Input\n  }],\n  template: [{\n    type: Input\n  }],\n  onClick: [{\n    type: Output\n  }]\n};\n\nvar Dropdown = /*#__PURE__*/function () {\n  function Dropdown(el, renderer, cd, zone) {\n    _classCallCheck(this, Dropdown);\n\n    this.el = el;\n    this.renderer = renderer;\n    this.cd = cd;\n    this.zone = zone;\n    this.scrollHeight = '200px';\n    this.filterBy = 'label';\n    this.resetFilterOnHide = false;\n    this.dropdownIcon = 'pi pi-chevron-down';\n    this.autoDisplayFirst = true;\n    this.emptyFilterMessage = 'No results found';\n    this.autoZIndex = true;\n    this.baseZIndex = 0;\n    this.showTransitionOptions = '.12s cubic-bezier(0, 0, 0.2, 1)';\n    this.hideTransitionOptions = '.1s linear';\n    this.filterMatchMode = \"contains\";\n    this.tooltip = '';\n    this.tooltipPosition = 'right';\n    this.tooltipPositionStyle = 'absolute';\n    this.autofocusFilter = true;\n    this.onChange = new EventEmitter();\n    this.onFocus = new EventEmitter();\n    this.onBlur = new EventEmitter();\n    this.onClick = new EventEmitter();\n    this.onShow = new EventEmitter();\n    this.onHide = new EventEmitter();\n\n    this.onModelChange = function () {};\n\n    this.onModelTouched = function () {};\n\n    this.viewPortOffsetTop = 0;\n  }\n\n  _createClass(Dropdown, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this = this;\n\n      this.templates.forEach(function (item) {\n        switch (item.getType()) {\n          case 'item':\n            _this.itemTemplate = item.template;\n            break;\n\n          case 'selectedItem':\n            _this.selectedItemTemplate = item.template;\n            break;\n\n          case 'group':\n            _this.groupTemplate = item.template;\n            break;\n\n          default:\n            _this.itemTemplate = item.template;\n            break;\n        }\n      });\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.optionsToDisplay = this.options;\n      this.updateSelectedOption(null);\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      if (this.editable) {\n        this.updateEditableLabel();\n      }\n    }\n  }, {\n    key: \"updateEditableLabel\",\n    value: function updateEditableLabel() {\n      if (this.editableInputViewChild && this.editableInputViewChild.nativeElement) {\n        this.editableInputViewChild.nativeElement.value = this.selectedOption ? this.selectedOption.label : this.value || '';\n      }\n    }\n  }, {\n    key: \"onItemClick\",\n    value: function onItemClick(event) {\n      var _this2 = this;\n\n      var option = event.option;\n\n      if (!option.disabled) {\n        this.selectItem(event, option);\n        this.accessibleViewChild.nativeElement.focus();\n      }\n\n      setTimeout(function () {\n        _this2.hide(event);\n      }, 150);\n    }\n  }, {\n    key: \"selectItem\",\n    value: function selectItem(event, option) {\n      var _this3 = this;\n\n      if (this.selectedOption != option) {\n        this.selectedOption = option;\n        this.value = option.value;\n        this.filled = true;\n        this.onModelChange(this.value);\n        this.updateEditableLabel();\n        this.onChange.emit({\n          originalEvent: event.originalEvent,\n          value: this.value\n        });\n\n        if (this.virtualScroll) {\n          setTimeout(function () {\n            _this3.viewPortOffsetTop = _this3.viewPort ? _this3.viewPort.measureScrollOffset() : 0;\n          }, 1);\n        }\n      }\n    }\n  }, {\n    key: \"ngAfterViewChecked\",\n    value: function ngAfterViewChecked() {\n      var _this4 = this;\n\n      if (this.optionsChanged && this.overlayVisible) {\n        this.optionsChanged = false;\n\n        if (this.virtualScroll) {\n          this.updateVirtualScrollSelectedIndex(true);\n        }\n\n        this.zone.runOutsideAngular(function () {\n          setTimeout(function () {\n            _this4.alignOverlay();\n          }, 1);\n        });\n      }\n\n      if (this.selectedOptionUpdated && this.itemsWrapper) {\n        if (this.virtualScroll && this.viewPort) {\n          var range = this.viewPort.getRenderedRange();\n          this.updateVirtualScrollSelectedIndex(false);\n\n          if (range.start > this.virtualScrollSelectedIndex || range.end < this.virtualScrollSelectedIndex) {\n            this.viewPort.scrollToIndex(this.virtualScrollSelectedIndex);\n          }\n        }\n\n        var selectedItem = DomHandler.findSingle(this.overlay, 'li.p-highlight');\n\n        if (selectedItem) {\n          DomHandler.scrollInView(this.itemsWrapper, DomHandler.findSingle(this.overlay, 'li.p-highlight'));\n        }\n\n        this.selectedOptionUpdated = false;\n      }\n    }\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      if (this.filter) {\n        this.resetFilter();\n      }\n\n      this.value = value;\n      this.updateSelectedOption(value);\n      this.updateEditableLabel();\n      this.updateFilledState();\n      this.cd.markForCheck();\n    }\n  }, {\n    key: \"resetFilter\",\n    value: function resetFilter() {\n      this.filterValue = null;\n\n      if (this.filterViewChild && this.filterViewChild.nativeElement) {\n        this.filterViewChild.nativeElement.value = '';\n      }\n\n      this.optionsToDisplay = this.options;\n    }\n  }, {\n    key: \"updateSelectedOption\",\n    value: function updateSelectedOption(val) {\n      this.selectedOption = this.findOption(val, this.optionsToDisplay);\n\n      if (this.autoDisplayFirst && !this.placeholder && !this.selectedOption && this.optionsToDisplay && this.optionsToDisplay.length && !this.editable) {\n        this.selectedOption = this.optionsToDisplay[0];\n      }\n\n      this.selectedOptionUpdated = true;\n    }\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n  }, {\n    key: \"onMouseclick\",\n    value: function onMouseclick(event) {\n      if (this.disabled || this.readonly || this.isInputClick(event)) {\n        return;\n      }\n\n      this.onClick.emit(event);\n      this.accessibleViewChild.nativeElement.focus();\n      if (this.overlayVisible) this.hide(event);else this.show();\n      this.cd.detectChanges();\n    }\n  }, {\n    key: \"isInputClick\",\n    value: function isInputClick(event) {\n      return DomHandler.hasClass(event.target, 'p-dropdown-clear-icon') || event.target.isSameNode(this.accessibleViewChild.nativeElement) || this.editableInputViewChild && event.target.isSameNode(this.editableInputViewChild.nativeElement);\n    }\n  }, {\n    key: \"isOutsideClicked\",\n    value: function isOutsideClicked(event) {\n      return !(this.el.nativeElement.isSameNode(event.target) || this.el.nativeElement.contains(event.target) || this.overlay && this.overlay.contains(event.target));\n    }\n  }, {\n    key: \"onEditableInputClick\",\n    value: function onEditableInputClick() {\n      this.bindDocumentClickListener();\n    }\n  }, {\n    key: \"onEditableInputFocus\",\n    value: function onEditableInputFocus(event) {\n      this.focused = true;\n      this.hide(event);\n      this.onFocus.emit(event);\n    }\n  }, {\n    key: \"onEditableInputChange\",\n    value: function onEditableInputChange(event) {\n      this.value = event.target.value;\n      this.updateSelectedOption(this.value);\n      this.onModelChange(this.value);\n      this.onChange.emit({\n        originalEvent: event,\n        value: this.value\n      });\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      this.overlayVisible = true;\n    }\n  }, {\n    key: \"onOverlayAnimationStart\",\n    value: function onOverlayAnimationStart(event) {\n      switch (event.toState) {\n        case 'visible':\n          this.overlay = event.element;\n          var itemsWrapperSelector = this.virtualScroll ? '.cdk-virtual-scroll-viewport' : '.p-dropdown-items-wrapper';\n          this.itemsWrapper = DomHandler.findSingle(this.overlay, itemsWrapperSelector);\n          this.appendOverlay();\n\n          if (this.autoZIndex) {\n            this.overlay.style.zIndex = String(this.baseZIndex + ++DomHandler.zindex);\n          }\n\n          this.alignOverlay();\n          this.bindDocumentClickListener();\n          this.bindDocumentResizeListener();\n\n          if (this.options && this.options.length) {\n            if (!this.virtualScroll) {\n              var selectedListItem = DomHandler.findSingle(this.itemsWrapper, '.p-dropdown-item.p-highlight');\n\n              if (selectedListItem) {\n                DomHandler.scrollInView(this.itemsWrapper, selectedListItem);\n              }\n            }\n          }\n\n          if (this.filterViewChild && this.filterViewChild.nativeElement) {\n            this.preventModelTouched = true;\n\n            if (this.autofocusFilter) {\n              this.filterViewChild.nativeElement.focus();\n            }\n          }\n\n          this.onShow.emit(event);\n          break;\n\n        case 'void':\n          this.onOverlayHide();\n          break;\n      }\n    }\n  }, {\n    key: \"scrollToSelectedVirtualScrollElement\",\n    value: function scrollToSelectedVirtualScrollElement() {\n      if (!this.virtualAutoScrolled) {\n        if (this.viewPortOffsetTop) {\n          this.viewPort.scrollToOffset(this.viewPortOffsetTop);\n        } else if (this.virtualScrollSelectedIndex > -1) {\n          this.viewPort.scrollToIndex(this.virtualScrollSelectedIndex);\n        }\n      }\n\n      this.virtualAutoScrolled = true;\n    }\n  }, {\n    key: \"updateVirtualScrollSelectedIndex\",\n    value: function updateVirtualScrollSelectedIndex(resetOffset) {\n      if (this.selectedOption && this.optionsToDisplay && this.optionsToDisplay.length) {\n        if (resetOffset) {\n          this.viewPortOffsetTop = 0;\n        }\n\n        this.virtualScrollSelectedIndex = this.findOptionIndex(this.selectedOption.value, this.optionsToDisplay);\n      }\n    }\n  }, {\n    key: \"appendOverlay\",\n    value: function appendOverlay() {\n      if (this.appendTo) {\n        if (this.appendTo === 'body') document.body.appendChild(this.overlay);else DomHandler.appendChild(this.overlay, this.appendTo);\n\n        if (!this.overlay.style.minWidth) {\n          this.overlay.style.minWidth = DomHandler.getWidth(this.containerViewChild.nativeElement) + 'px';\n        }\n      }\n    }\n  }, {\n    key: \"restoreOverlayAppend\",\n    value: function restoreOverlayAppend() {\n      if (this.overlay && this.appendTo) {\n        this.el.nativeElement.appendChild(this.overlay);\n      }\n    }\n  }, {\n    key: \"hide\",\n    value: function hide(event) {\n      this.overlayVisible = false;\n\n      if (this.filter && this.resetFilterOnHide) {\n        this.resetFilter();\n      }\n\n      if (this.virtualScroll) {\n        this.virtualAutoScrolled = false;\n      }\n\n      this.cd.markForCheck();\n      this.onHide.emit(event);\n    }\n  }, {\n    key: \"alignOverlay\",\n    value: function alignOverlay() {\n      if (this.overlay) {\n        if (this.appendTo) DomHandler.absolutePosition(this.overlay, this.containerViewChild.nativeElement);else DomHandler.relativePosition(this.overlay, this.containerViewChild.nativeElement);\n      }\n    }\n  }, {\n    key: \"onInputFocus\",\n    value: function onInputFocus(event) {\n      this.focused = true;\n      this.onFocus.emit(event);\n    }\n  }, {\n    key: \"onInputBlur\",\n    value: function onInputBlur(event) {\n      this.focused = false;\n      this.onBlur.emit(event);\n\n      if (!this.preventModelTouched) {\n        this.onModelTouched();\n      }\n\n      this.preventModelTouched = false;\n    }\n  }, {\n    key: \"findPrevEnabledOption\",\n    value: function findPrevEnabledOption(index) {\n      var prevEnabledOption;\n\n      if (this.optionsToDisplay && this.optionsToDisplay.length) {\n        for (var i = index - 1; 0 <= i; i--) {\n          var option = this.optionsToDisplay[i];\n\n          if (option.disabled) {\n            continue;\n          } else {\n            prevEnabledOption = option;\n            break;\n          }\n        }\n\n        if (!prevEnabledOption) {\n          for (var _i = this.optionsToDisplay.length - 1; _i >= index; _i--) {\n            var _option = this.optionsToDisplay[_i];\n\n            if (_option.disabled) {\n              continue;\n            } else {\n              prevEnabledOption = _option;\n              break;\n            }\n          }\n        }\n      }\n\n      return prevEnabledOption;\n    }\n  }, {\n    key: \"findNextEnabledOption\",\n    value: function findNextEnabledOption(index) {\n      var nextEnabledOption;\n\n      if (this.optionsToDisplay && this.optionsToDisplay.length) {\n        for (var i = index + 1; index < this.optionsToDisplay.length - 1; i++) {\n          var option = this.optionsToDisplay[i];\n\n          if (option.disabled) {\n            continue;\n          } else {\n            nextEnabledOption = option;\n            break;\n          }\n        }\n\n        if (!nextEnabledOption) {\n          for (var _i2 = 0; _i2 < index; _i2++) {\n            var _option2 = this.optionsToDisplay[_i2];\n\n            if (_option2.disabled) {\n              continue;\n            } else {\n              nextEnabledOption = _option2;\n              break;\n            }\n          }\n        }\n      }\n\n      return nextEnabledOption;\n    }\n  }, {\n    key: \"onKeydown\",\n    value: function onKeydown(event, search) {\n      if (this.readonly || !this.optionsToDisplay || this.optionsToDisplay.length === null) {\n        return;\n      }\n\n      switch (event.which) {\n        //down\n        case 40:\n          if (!this.overlayVisible && event.altKey) {\n            this.show();\n          } else {\n            if (this.group) {\n              var selectedItemIndex = this.selectedOption ? this.findOptionGroupIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n\n              if (selectedItemIndex !== -1) {\n                var nextItemIndex = selectedItemIndex.itemIndex + 1;\n\n                if (nextItemIndex < this.optionsToDisplay[selectedItemIndex.groupIndex].items.length) {\n                  this.selectItem(event, this.optionsToDisplay[selectedItemIndex.groupIndex].items[nextItemIndex]);\n                  this.selectedOptionUpdated = true;\n                } else if (this.optionsToDisplay[selectedItemIndex.groupIndex + 1]) {\n                  this.selectItem(event, this.optionsToDisplay[selectedItemIndex.groupIndex + 1].items[0]);\n                  this.selectedOptionUpdated = true;\n                }\n              } else {\n                this.selectItem(event, this.optionsToDisplay[0].items[0]);\n              }\n            } else {\n              var _selectedItemIndex = this.selectedOption ? this.findOptionIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n\n              var nextEnabledOption = this.findNextEnabledOption(_selectedItemIndex);\n\n              if (nextEnabledOption) {\n                this.selectItem(event, nextEnabledOption);\n                this.selectedOptionUpdated = true;\n              }\n            }\n          }\n\n          event.preventDefault();\n          break;\n        //up\n\n        case 38:\n          if (this.group) {\n            var _selectedItemIndex2 = this.selectedOption ? this.findOptionGroupIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n\n            if (_selectedItemIndex2 !== -1) {\n              var prevItemIndex = _selectedItemIndex2.itemIndex - 1;\n\n              if (prevItemIndex >= 0) {\n                this.selectItem(event, this.optionsToDisplay[_selectedItemIndex2.groupIndex].items[prevItemIndex]);\n                this.selectedOptionUpdated = true;\n              } else if (prevItemIndex < 0) {\n                var prevGroup = this.optionsToDisplay[_selectedItemIndex2.groupIndex - 1];\n\n                if (prevGroup) {\n                  this.selectItem(event, prevGroup.items[prevGroup.items.length - 1]);\n                  this.selectedOptionUpdated = true;\n                }\n              }\n            }\n          } else {\n            var _selectedItemIndex3 = this.selectedOption ? this.findOptionIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n\n            var prevEnabledOption = this.findPrevEnabledOption(_selectedItemIndex3);\n\n            if (prevEnabledOption) {\n              this.selectItem(event, prevEnabledOption);\n              this.selectedOptionUpdated = true;\n            }\n          }\n\n          event.preventDefault();\n          break;\n        //space\n\n        case 32:\n        case 32:\n          if (!this.overlayVisible) {\n            this.show();\n            event.preventDefault();\n          }\n\n          break;\n        //enter\n\n        case 13:\n          if (!this.filter || this.optionsToDisplay && this.optionsToDisplay.length > 0) {\n            this.hide(event);\n          }\n\n          event.preventDefault();\n          break;\n        //escape and tab\n\n        case 27:\n        case 9:\n          this.hide(event);\n          break;\n        //search item based on keyboard input\n\n        default:\n          if (search) {\n            this.search(event);\n          }\n\n          break;\n      }\n    }\n  }, {\n    key: \"search\",\n    value: function search(event) {\n      var _this5 = this;\n\n      if (this.searchTimeout) {\n        clearTimeout(this.searchTimeout);\n      }\n\n      var char = event.key;\n      this.previousSearchChar = this.currentSearchChar;\n      this.currentSearchChar = char;\n      if (this.previousSearchChar === this.currentSearchChar) this.searchValue = this.currentSearchChar;else this.searchValue = this.searchValue ? this.searchValue + char : char;\n      var newOption;\n\n      if (this.group) {\n        var searchIndex = this.selectedOption ? this.findOptionGroupIndex(this.selectedOption.value, this.optionsToDisplay) : {\n          groupIndex: 0,\n          itemIndex: 0\n        };\n        newOption = this.searchOptionWithinGroup(searchIndex);\n      } else {\n        var _searchIndex = this.selectedOption ? this.findOptionIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n\n        newOption = this.searchOption(++_searchIndex);\n      }\n\n      if (newOption && !newOption.disabled) {\n        this.selectItem(event, newOption);\n        this.selectedOptionUpdated = true;\n      }\n\n      this.searchTimeout = setTimeout(function () {\n        _this5.searchValue = null;\n      }, 250);\n    }\n  }, {\n    key: \"searchOption\",\n    value: function searchOption(index) {\n      var option;\n\n      if (this.searchValue) {\n        option = this.searchOptionInRange(index, this.optionsToDisplay.length);\n\n        if (!option) {\n          option = this.searchOptionInRange(0, index);\n        }\n      }\n\n      return option;\n    }\n  }, {\n    key: \"searchOptionInRange\",\n    value: function searchOptionInRange(start, end) {\n      for (var i = start; i < end; i++) {\n        var opt = this.optionsToDisplay[i];\n\n        if (opt.label.toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale)) && !opt.disabled) {\n          return opt;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"searchOptionWithinGroup\",\n    value: function searchOptionWithinGroup(index) {\n      var option;\n\n      if (this.searchValue) {\n        for (var i = index.groupIndex; i < this.optionsToDisplay.length; i++) {\n          for (var j = index.groupIndex === i ? index.itemIndex + 1 : 0; j < this.optionsToDisplay[i].items.length; j++) {\n            var opt = this.optionsToDisplay[i].items[j];\n\n            if (opt.label.toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale)) && !opt.disabled) {\n              return opt;\n            }\n          }\n        }\n\n        if (!option) {\n          for (var _i3 = 0; _i3 <= index.groupIndex; _i3++) {\n            for (var _j = 0; _j < (index.groupIndex === _i3 ? index.itemIndex : this.optionsToDisplay[_i3].items.length); _j++) {\n              var _opt = this.optionsToDisplay[_i3].items[_j];\n\n              if (_opt.label.toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale)) && !_opt.disabled) {\n                return _opt;\n              }\n            }\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"findOptionIndex\",\n    value: function findOptionIndex(val, opts) {\n      var index = -1;\n\n      if (opts) {\n        for (var i = 0; i < opts.length; i++) {\n          if (val == null && opts[i].value == null || ObjectUtils.equals(val, opts[i].value, this.dataKey)) {\n            index = i;\n            break;\n          }\n        }\n      }\n\n      return index;\n    }\n  }, {\n    key: \"findOptionGroupIndex\",\n    value: function findOptionGroupIndex(val, opts) {\n      var groupIndex, itemIndex;\n\n      if (opts) {\n        for (var i = 0; i < opts.length; i++) {\n          groupIndex = i;\n          itemIndex = this.findOptionIndex(val, opts[i].items);\n\n          if (itemIndex !== -1) {\n            break;\n          }\n        }\n      }\n\n      if (itemIndex !== -1) {\n        return {\n          groupIndex: groupIndex,\n          itemIndex: itemIndex\n        };\n      } else {\n        return -1;\n      }\n    }\n  }, {\n    key: \"findOption\",\n    value: function findOption(val, opts, inGroup) {\n      if (this.group && !inGroup) {\n        var opt;\n\n        if (opts && opts.length) {\n          var _iterator = _createForOfIteratorHelper(opts),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var optgroup = _step.value;\n              opt = this.findOption(val, optgroup.items, true);\n\n              if (opt) {\n                break;\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n\n        return opt;\n      } else {\n        var index = this.findOptionIndex(val, opts);\n        return index != -1 ? opts[index] : null;\n      }\n    }\n  }, {\n    key: \"onFilter\",\n    value: function onFilter(event) {\n      var inputValue = event.target.value;\n\n      if (inputValue && inputValue.length) {\n        this.filterValue = inputValue;\n        this.activateFilter();\n      } else {\n        this.filterValue = null;\n        this.optionsToDisplay = this.options;\n      }\n\n      this.optionsChanged = true;\n    }\n  }, {\n    key: \"activateFilter\",\n    value: function activateFilter() {\n      var searchFields = this.filterBy.split(',');\n\n      if (this.options && this.options.length) {\n        if (this.group) {\n          var filteredGroups = [];\n\n          var _iterator2 = _createForOfIteratorHelper(this.options),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var optgroup = _step2.value;\n              var filteredSubOptions = FilterUtils.filter(optgroup.items, searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n\n              if (filteredSubOptions && filteredSubOptions.length) {\n                filteredGroups.push({\n                  label: optgroup.label,\n                  value: optgroup.value,\n                  items: filteredSubOptions\n                });\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          this.optionsToDisplay = filteredGroups;\n        } else {\n          this.optionsToDisplay = FilterUtils.filter(this.options, searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n        }\n\n        this.optionsChanged = true;\n      }\n    }\n  }, {\n    key: \"applyFocus\",\n    value: function applyFocus() {\n      if (this.editable) DomHandler.findSingle(this.el.nativeElement, '.p-dropdown-label.p-inputtext').focus();else DomHandler.findSingle(this.el.nativeElement, 'input[readonly]').focus();\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.applyFocus();\n    }\n  }, {\n    key: \"bindDocumentClickListener\",\n    value: function bindDocumentClickListener() {\n      var _this6 = this;\n\n      if (!this.documentClickListener) {\n        var documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';\n        this.documentClickListener = this.renderer.listen(documentTarget, 'click', function (event) {\n          if (_this6.isOutsideClicked(event)) {\n            _this6.hide(event);\n\n            _this6.unbindDocumentClickListener();\n          }\n\n          _this6.cd.markForCheck();\n        });\n      }\n    }\n  }, {\n    key: \"unbindDocumentClickListener\",\n    value: function unbindDocumentClickListener() {\n      if (this.documentClickListener) {\n        this.documentClickListener();\n        this.documentClickListener = null;\n      }\n    }\n  }, {\n    key: \"bindDocumentResizeListener\",\n    value: function bindDocumentResizeListener() {\n      this.documentResizeListener = this.onWindowResize.bind(this);\n      window.addEventListener('resize', this.documentResizeListener);\n    }\n  }, {\n    key: \"unbindDocumentResizeListener\",\n    value: function unbindDocumentResizeListener() {\n      if (this.documentResizeListener) {\n        window.removeEventListener('resize', this.documentResizeListener);\n        this.documentResizeListener = null;\n      }\n    }\n  }, {\n    key: \"onWindowResize\",\n    value: function onWindowResize() {\n      if (!DomHandler.isAndroid()) {\n        this.hide(event);\n      }\n    }\n  }, {\n    key: \"updateFilledState\",\n    value: function updateFilledState() {\n      this.filled = this.selectedOption != null;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(event) {\n      this.value = null;\n      this.onModelChange(this.value);\n      this.onChange.emit({\n        originalEvent: event,\n        value: this.value\n      });\n      this.updateSelectedOption(this.value);\n      this.updateEditableLabel();\n      this.updateFilledState();\n    }\n  }, {\n    key: \"onOverlayHide\",\n    value: function onOverlayHide() {\n      this.unbindDocumentClickListener();\n      this.unbindDocumentResizeListener();\n      this.overlay = null;\n      this.itemsWrapper = null;\n      this.onModelTouched();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.restoreOverlayAppend();\n      this.onOverlayHide();\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    },\n    set: function set(_disabled) {\n      if (_disabled) this.focused = false;\n      this._disabled = _disabled;\n\n      if (!this.cd.destroyed) {\n        this.cd.detectChanges();\n      }\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      return this._options;\n    },\n    set: function set(val) {\n      var opts = this.optionLabel ? ObjectUtils.generateSelectItems(val, this.optionLabel) : val;\n      this._options = opts;\n      this.optionsToDisplay = this._options;\n      this.updateSelectedOption(this.value);\n      this.optionsChanged = true;\n      this.updateFilledState();\n\n      if (this.filterValue && this.filterValue.length) {\n        this.activateFilter();\n      }\n    }\n  }, {\n    key: \"label\",\n    get: function get() {\n      return this.selectedOption ? this.selectedOption.label : null;\n    }\n  }]);\n\n  return Dropdown;\n}();\n\nDropdown.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'p-dropdown',\n    template: \"\\n         <div #container [ngClass]=\\\"{'p-dropdown p-component':true,\\n            'p-disabled':disabled, 'p-dropdown-open':overlayVisible, 'p-focus':focused, 'p-dropdown-clearable': showClear && !disabled}\\\"\\n            (click)=\\\"onMouseclick($event)\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\">\\n            <div class=\\\"p-hidden-accessible\\\">\\n                <input #in [attr.id]=\\\"inputId\\\" type=\\\"text\\\" [attr.aria-label]=\\\"selectedOption ? selectedOption.label : ' '\\\" readonly (focus)=\\\"onInputFocus($event)\\\" aria-haspopup=\\\"listbox\\\"\\n                    aria-haspopup=\\\"listbox\\\" [attr.aria-expanded]=\\\"overlayVisible\\\" [attr.aria-labelledby]=\\\"ariaLabelledBy\\\" (blur)=\\\"onInputBlur($event)\\\" (keydown)=\\\"onKeydown($event, true)\\\"\\n                    [disabled]=\\\"disabled\\\" [attr.tabindex]=\\\"tabindex\\\" [attr.autofocus]=\\\"autofocus\\\" role=\\\"listbox\\\">\\n            </div>\\n            <span [ngClass]=\\\"{'p-dropdown-label p-inputtext':true,'p-dropdown-label-empty':(label == null || label.length === 0)}\\\" *ngIf=\\\"!editable && (label != null)\\\" [pTooltip]=\\\"tooltip\\\" [tooltipPosition]=\\\"tooltipPosition\\\" [positionStyle]=\\\"tooltipPositionStyle\\\" [tooltipStyleClass]=\\\"tooltipStyleClass\\\">\\n                <ng-container *ngIf=\\\"!selectedItemTemplate\\\">{{label||'empty'}}</ng-container>\\n                <ng-container *ngTemplateOutlet=\\\"selectedItemTemplate; context: {$implicit: selectedOption}\\\"></ng-container>\\n            </span>\\n            <span [ngClass]=\\\"{'p-dropdown-label p-inputtext p-placeholder':true,'p-dropdown-label-empty': (placeholder == null || placeholder.length === 0)}\\\" *ngIf=\\\"!editable && (label == null)\\\">{{placeholder||'empty'}}</span>\\n            <input #editableInput type=\\\"text\\\" [attr.maxlength]=\\\"maxlength\\\" [attr.aria-label]=\\\"selectedOption ? selectedOption.label : ' '\\\" class=\\\"p-dropdown-label p-inputtext\\\" *ngIf=\\\"editable\\\" [disabled]=\\\"disabled\\\" [attr.placeholder]=\\\"placeholder\\\"\\n                aria-haspopup=\\\"listbox\\\" [attr.aria-expanded]=\\\"overlayVisible\\\" (click)=\\\"onEditableInputClick()\\\" (input)=\\\"onEditableInputChange($event)\\\" (focus)=\\\"onEditableInputFocus($event)\\\" (blur)=\\\"onInputBlur($event)\\\">\\n            <i class=\\\"p-dropdown-clear-icon pi pi-times\\\" (click)=\\\"clear($event)\\\" *ngIf=\\\"value != null && showClear && !disabled\\\"></i>\\n            <div class=\\\"p-dropdown-trigger\\\" role=\\\"button\\\" aria-haspopup=\\\"listbox\\\" [attr.aria-expanded]=\\\"overlayVisible\\\">\\n                <span class=\\\"p-dropdown-trigger-icon\\\" [ngClass]=\\\"dropdownIcon\\\"></span>\\n            </div>\\n            <div *ngIf=\\\"overlayVisible\\\" [ngClass]=\\\"'p-dropdown-panel p-component'\\\" [@overlayAnimation]=\\\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\\\" (@overlayAnimation.start)=\\\"onOverlayAnimationStart($event)\\\" [ngStyle]=\\\"panelStyle\\\" [class]=\\\"panelStyleClass\\\">\\n                <div class=\\\"p-dropdown-header\\\" *ngIf=\\\"filter\\\" >\\n                    <div class=\\\"p-dropdown-filter-container\\\" (click)=\\\"$event.stopPropagation()\\\">\\n                        <input #filter type=\\\"text\\\" autocomplete=\\\"off\\\" [value]=\\\"filterValue||''\\\" class=\\\"p-dropdown-filter p-inputtext p-component\\\" [attr.placeholder]=\\\"filterPlaceholder\\\"\\n                        (keydown.enter)=\\\"$event.preventDefault()\\\" (keydown)=\\\"onKeydown($event, false)\\\" (input)=\\\"onFilter($event)\\\" [attr.aria-label]=\\\"ariaFilterLabel\\\">\\n                        <span class=\\\"p-dropdown-filter-icon pi pi-search\\\"></span>\\n                    </div>\\n                </div>\\n                <div class=\\\"p-dropdown-items-wrapper\\\" [style.max-height]=\\\"virtualScroll ? 'auto' : (scrollHeight||'auto')\\\">\\n                    <ul class=\\\"p-dropdown-items\\\" role=\\\"listbox\\\">\\n                        <ng-container *ngIf=\\\"group\\\">\\n                            <ng-template ngFor let-optgroup [ngForOf]=\\\"optionsToDisplay\\\">\\n                                <li class=\\\"p-dropdown-item-group\\\">\\n                                    <span *ngIf=\\\"!groupTemplate\\\">{{optgroup.label||'empty'}}</span>\\n                                    <ng-container *ngTemplateOutlet=\\\"groupTemplate; context: {$implicit: optgroup}\\\"></ng-container>\\n                                </li>\\n                                <ng-container *ngTemplateOutlet=\\\"itemslist; context: {$implicit: optgroup.items, selectedOption: selectedOption}\\\"></ng-container>\\n                            </ng-template>\\n                        </ng-container>\\n                        <ng-container *ngIf=\\\"!group\\\">\\n                            <ng-container *ngTemplateOutlet=\\\"itemslist; context: {$implicit: optionsToDisplay, selectedOption: selectedOption}\\\"></ng-container>\\n                        </ng-container>\\n                        <ng-template #itemslist let-options let-selectedOption=\\\"selectedOption\\\">\\n                            <ng-container *ngIf=\\\"!virtualScroll; else virtualScrollList\\\">\\n                                <ng-template ngFor let-option let-i=\\\"index\\\" [ngForOf]=\\\"options\\\">\\n                                    <p-dropdownItem [option]=\\\"option\\\" [selected]=\\\"selectedOption == option\\\"\\n                                                    (onClick)=\\\"onItemClick($event)\\\"\\n                                                    [template]=\\\"itemTemplate\\\"></p-dropdownItem>\\n                                </ng-template>\\n                            </ng-container>\\n                            <ng-template #virtualScrollList>\\n                                <cdk-virtual-scroll-viewport (scrolledIndexChange)=\\\"scrollToSelectedVirtualScrollElement()\\\" #viewport [ngStyle]=\\\"{'height': scrollHeight}\\\" [itemSize]=\\\"itemSize\\\" *ngIf=\\\"virtualScroll && optionsToDisplay && optionsToDisplay.length\\\">\\n                                    <ng-container *cdkVirtualFor=\\\"let option of options; let i = index; let c = count; let f = first; let l = last; let e = even; let o = odd\\\">\\n                                        <p-dropdownItem [option]=\\\"option\\\" [selected]=\\\"selectedOption == option\\\"\\n                                                                   (onClick)=\\\"onItemClick($event)\\\"\\n                                                                   [template]=\\\"itemTemplate\\\"></p-dropdownItem>\\n                                    </ng-container>\\n                                </cdk-virtual-scroll-viewport>\\n                            </ng-template>\\n                        </ng-template>\\n                        <li *ngIf=\\\"filter && (!optionsToDisplay || (optionsToDisplay && optionsToDisplay.length === 0))\\\" class=\\\"p-dropdown-empty-message\\\">{{emptyFilterMessage}}</li>\\n                    </ul>\\n                </div>\\n            </div>\\n        </div>\\n    \",\n    animations: [trigger('overlayAnimation', [transition(':enter', [style({\n      opacity: 0,\n      transform: 'scaleY(0.8)'\n    }), animate('{{showTransitionParams}}')]), transition(':leave', [animate('{{hideTransitionParams}}', style({\n      opacity: 0\n    }))])])],\n    host: {\n      '[class.p-inputwrapper-filled]': 'filled',\n      '[class.p-inputwrapper-focus]': 'focused'\n    },\n    providers: [DROPDOWN_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styles: [\".p-dropdown{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;cursor:pointer;display:-ms-inline-flexbox;display:inline-flex;position:relative;user-select:none}.p-dropdown-clear-icon{margin-top:-.5rem;position:absolute;top:50%}.p-dropdown-trigger{-ms-flex-align:center;-ms-flex-negative:0;-ms-flex-pack:center;align-items:center;display:-ms-flexbox;display:flex;flex-shrink:0;justify-content:center}.p-dropdown-label{-ms-flex:1 1 auto;cursor:pointer;display:block;flex:1 1 auto;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:1%}.p-dropdown-label-empty{overflow:hidden;visibility:hidden}input.p-dropdown-label{cursor:default}.p-dropdown .p-dropdown-panel{min-width:100%}.p-dropdown-panel{position:absolute}.p-dropdown-items-wrapper{overflow:auto}.p-dropdown-item{cursor:pointer;font-weight:400;overflow:hidden;position:relative;white-space:nowrap}.p-dropdown-items{list-style-type:none;margin:0;padding:0}.p-dropdown-filter{width:100%}.p-dropdown-filter-container{position:relative}.p-dropdown-filter-icon{margin-top:-.5rem;position:absolute;top:50%}.p-fluid .p-dropdown{display:-ms-flexbox;display:flex}.p-fluid .p-dropdown .p-dropdown-label{width:1%}\"]\n  }]\n}];\n\nDropdown.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Renderer2\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: NgZone\n  }];\n};\n\nDropdown.propDecorators = {\n  scrollHeight: [{\n    type: Input\n  }],\n  filter: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  style: [{\n    type: Input\n  }],\n  panelStyle: [{\n    type: Input\n  }],\n  styleClass: [{\n    type: Input\n  }],\n  panelStyleClass: [{\n    type: Input\n  }],\n  readonly: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  editable: [{\n    type: Input\n  }],\n  appendTo: [{\n    type: Input\n  }],\n  tabindex: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  filterPlaceholder: [{\n    type: Input\n  }],\n  filterLocale: [{\n    type: Input\n  }],\n  inputId: [{\n    type: Input\n  }],\n  selectId: [{\n    type: Input\n  }],\n  dataKey: [{\n    type: Input\n  }],\n  filterBy: [{\n    type: Input\n  }],\n  autofocus: [{\n    type: Input\n  }],\n  resetFilterOnHide: [{\n    type: Input\n  }],\n  dropdownIcon: [{\n    type: Input\n  }],\n  optionLabel: [{\n    type: Input\n  }],\n  autoDisplayFirst: [{\n    type: Input\n  }],\n  group: [{\n    type: Input\n  }],\n  showClear: [{\n    type: Input\n  }],\n  emptyFilterMessage: [{\n    type: Input\n  }],\n  virtualScroll: [{\n    type: Input\n  }],\n  itemSize: [{\n    type: Input\n  }],\n  autoZIndex: [{\n    type: Input\n  }],\n  baseZIndex: [{\n    type: Input\n  }],\n  showTransitionOptions: [{\n    type: Input\n  }],\n  hideTransitionOptions: [{\n    type: Input\n  }],\n  ariaFilterLabel: [{\n    type: Input\n  }],\n  ariaLabelledBy: [{\n    type: Input\n  }],\n  filterMatchMode: [{\n    type: Input\n  }],\n  maxlength: [{\n    type: Input\n  }],\n  tooltip: [{\n    type: Input\n  }],\n  tooltipPosition: [{\n    type: Input\n  }],\n  tooltipPositionStyle: [{\n    type: Input\n  }],\n  tooltipStyleClass: [{\n    type: Input\n  }],\n  autofocusFilter: [{\n    type: Input\n  }],\n  onChange: [{\n    type: Output\n  }],\n  onFocus: [{\n    type: Output\n  }],\n  onBlur: [{\n    type: Output\n  }],\n  onClick: [{\n    type: Output\n  }],\n  onShow: [{\n    type: Output\n  }],\n  onHide: [{\n    type: Output\n  }],\n  containerViewChild: [{\n    type: ViewChild,\n    args: ['container']\n  }],\n  filterViewChild: [{\n    type: ViewChild,\n    args: ['filter']\n  }],\n  accessibleViewChild: [{\n    type: ViewChild,\n    args: ['in']\n  }],\n  viewPort: [{\n    type: ViewChild,\n    args: [CdkVirtualScrollViewport]\n  }],\n  editableInputViewChild: [{\n    type: ViewChild,\n    args: ['editableInput']\n  }],\n  templates: [{\n    type: ContentChildren,\n    args: [PrimeTemplate]\n  }],\n  disabled: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }]\n};\n\nvar DropdownModule = function DropdownModule() {\n  _classCallCheck(this, DropdownModule);\n};\n\nDropdownModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, SharedModule, ScrollingModule, TooltipModule, RippleModule],\n    exports: [Dropdown, SharedModule, ScrollingModule],\n    declarations: [Dropdown, DropdownItem]\n  }]\n}];\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DROPDOWN_VALUE_ACCESSOR, Dropdown, DropdownItem, DropdownModule };","map":{"version":3,"sources":["../../src/app/components/dropdown/dropdown.ts","../../src/app/components/dropdown/primeng-dropdown.ts"],"names":[],"mappings":"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","sourcesContent":["import {ScrollingModule, CdkVirtualScrollViewport} from '@angular/cdk/scrolling';\nimport {NgModule,Component,ElementRef,OnInit,AfterViewInit,AfterContentInit,AfterViewChecked,OnDestroy,Input,Output,Renderer2,EventEmitter,ContentChildren,\n        QueryList,ViewChild,TemplateRef,forwardRef,ChangeDetectorRef,NgZone,ViewRef,ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport {trigger,state,style,transition,animate,AnimationEvent} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {SelectItem} from 'primeng/api';\nimport {SharedModule,PrimeTemplate} from 'primeng/api';\nimport {DomHandler} from 'primeng/dom';\nimport {ObjectUtils} from 'primeng/utils';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {FilterUtils} from 'primeng/utils';\nimport {TooltipModule} from 'primeng/tooltip';\nimport {RippleModule} from 'primeng/ripple';\n\nexport const DROPDOWN_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Dropdown),\n  multi: true\n};\n\n@Component({\n    selector: 'p-dropdownItem',\n    template: `\n        <li (click)=\"onOptionClick($event)\" role=\"option\" pRipple\n            [attr.aria-label]=\"option.label\" [attr.aria-selected]=\"selected\"\n            [ngStyle]=\"{'height': itemSize + 'px'}\"\n            [ngClass]=\"{'p-dropdown-item':true, 'p-highlight': selected, 'p-disabled':(option.disabled)}\">\n            <span *ngIf=\"!template\">{{option.label||'empty'}}</span>\n            <ng-container *ngTemplateOutlet=\"template; context: {$implicit: option}\"></ng-container>\n        </li>\n    `\n})\nexport class DropdownItem {\n\n    @Input() option: SelectItem;\n\n    @Input() selected: boolean;\n\n    @Input() disabled: boolean;\n\n    @Input() visible: boolean;\n\n    @Input() itemSize: number;\n\n    @Input() template: TemplateRef<any>;\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n\n    onOptionClick(event: Event) {\n        this.onClick.emit({\n            originalEvent: event,\n            option: this.option\n        });\n    }\n}\n\n@Component({\n    selector: 'p-dropdown',\n    template: `\n         <div #container [ngClass]=\"{'p-dropdown p-component':true,\n            'p-disabled':disabled, 'p-dropdown-open':overlayVisible, 'p-focus':focused, 'p-dropdown-clearable': showClear && !disabled}\"\n            (click)=\"onMouseclick($event)\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"p-hidden-accessible\">\n                <input #in [attr.id]=\"inputId\" type=\"text\" [attr.aria-label]=\"selectedOption ? selectedOption.label : ' '\" readonly (focus)=\"onInputFocus($event)\" aria-haspopup=\"listbox\"\n                    aria-haspopup=\"listbox\" [attr.aria-expanded]=\"overlayVisible\" [attr.aria-labelledby]=\"ariaLabelledBy\" (blur)=\"onInputBlur($event)\" (keydown)=\"onKeydown($event, true)\"\n                    [disabled]=\"disabled\" [attr.tabindex]=\"tabindex\" [attr.autofocus]=\"autofocus\" role=\"listbox\">\n            </div>\n            <span [ngClass]=\"{'p-dropdown-label p-inputtext':true,'p-dropdown-label-empty':(label == null || label.length === 0)}\" *ngIf=\"!editable && (label != null)\" [pTooltip]=\"tooltip\" [tooltipPosition]=\"tooltipPosition\" [positionStyle]=\"tooltipPositionStyle\" [tooltipStyleClass]=\"tooltipStyleClass\">\n                <ng-container *ngIf=\"!selectedItemTemplate\">{{label||'empty'}}</ng-container>\n                <ng-container *ngTemplateOutlet=\"selectedItemTemplate; context: {$implicit: selectedOption}\"></ng-container>\n            </span>\n            <span [ngClass]=\"{'p-dropdown-label p-inputtext p-placeholder':true,'p-dropdown-label-empty': (placeholder == null || placeholder.length === 0)}\" *ngIf=\"!editable && (label == null)\">{{placeholder||'empty'}}</span>\n            <input #editableInput type=\"text\" [attr.maxlength]=\"maxlength\" [attr.aria-label]=\"selectedOption ? selectedOption.label : ' '\" class=\"p-dropdown-label p-inputtext\" *ngIf=\"editable\" [disabled]=\"disabled\" [attr.placeholder]=\"placeholder\"\n                aria-haspopup=\"listbox\" [attr.aria-expanded]=\"overlayVisible\" (click)=\"onEditableInputClick()\" (input)=\"onEditableInputChange($event)\" (focus)=\"onEditableInputFocus($event)\" (blur)=\"onInputBlur($event)\">\n            <i class=\"p-dropdown-clear-icon pi pi-times\" (click)=\"clear($event)\" *ngIf=\"value != null && showClear && !disabled\"></i>\n            <div class=\"p-dropdown-trigger\" role=\"button\" aria-haspopup=\"listbox\" [attr.aria-expanded]=\"overlayVisible\">\n                <span class=\"p-dropdown-trigger-icon\" [ngClass]=\"dropdownIcon\"></span>\n            </div>\n            <div *ngIf=\"overlayVisible\" [ngClass]=\"'p-dropdown-panel p-component'\" [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\" [ngStyle]=\"panelStyle\" [class]=\"panelStyleClass\">\n                <div class=\"p-dropdown-header\" *ngIf=\"filter\" >\n                    <div class=\"p-dropdown-filter-container\" (click)=\"$event.stopPropagation()\">\n                        <input #filter type=\"text\" autocomplete=\"off\" [value]=\"filterValue||''\" class=\"p-dropdown-filter p-inputtext p-component\" [attr.placeholder]=\"filterPlaceholder\"\n                        (keydown.enter)=\"$event.preventDefault()\" (keydown)=\"onKeydown($event, false)\" (input)=\"onFilter($event)\" [attr.aria-label]=\"ariaFilterLabel\">\n                        <span class=\"p-dropdown-filter-icon pi pi-search\"></span>\n                    </div>\n                </div>\n                <div class=\"p-dropdown-items-wrapper\" [style.max-height]=\"virtualScroll ? 'auto' : (scrollHeight||'auto')\">\n                    <ul class=\"p-dropdown-items\" role=\"listbox\">\n                        <ng-container *ngIf=\"group\">\n                            <ng-template ngFor let-optgroup [ngForOf]=\"optionsToDisplay\">\n                                <li class=\"p-dropdown-item-group\">\n                                    <span *ngIf=\"!groupTemplate\">{{optgroup.label||'empty'}}</span>\n                                    <ng-container *ngTemplateOutlet=\"groupTemplate; context: {$implicit: optgroup}\"></ng-container>\n                                </li>\n                                <ng-container *ngTemplateOutlet=\"itemslist; context: {$implicit: optgroup.items, selectedOption: selectedOption}\"></ng-container>\n                            </ng-template>\n                        </ng-container>\n                        <ng-container *ngIf=\"!group\">\n                            <ng-container *ngTemplateOutlet=\"itemslist; context: {$implicit: optionsToDisplay, selectedOption: selectedOption}\"></ng-container>\n                        </ng-container>\n                        <ng-template #itemslist let-options let-selectedOption=\"selectedOption\">\n                            <ng-container *ngIf=\"!virtualScroll; else virtualScrollList\">\n                                <ng-template ngFor let-option let-i=\"index\" [ngForOf]=\"options\">\n                                    <p-dropdownItem [option]=\"option\" [selected]=\"selectedOption == option\"\n                                                    (onClick)=\"onItemClick($event)\"\n                                                    [template]=\"itemTemplate\"></p-dropdownItem>\n                                </ng-template>\n                            </ng-container>\n                            <ng-template #virtualScrollList>\n                                <cdk-virtual-scroll-viewport (scrolledIndexChange)=\"scrollToSelectedVirtualScrollElement()\" #viewport [ngStyle]=\"{'height': scrollHeight}\" [itemSize]=\"itemSize\" *ngIf=\"virtualScroll && optionsToDisplay && optionsToDisplay.length\">\n                                    <ng-container *cdkVirtualFor=\"let option of options; let i = index; let c = count; let f = first; let l = last; let e = even; let o = odd\">\n                                        <p-dropdownItem [option]=\"option\" [selected]=\"selectedOption == option\"\n                                                                   (onClick)=\"onItemClick($event)\"\n                                                                   [template]=\"itemTemplate\"></p-dropdownItem>\n                                    </ng-container>\n                                </cdk-virtual-scroll-viewport>\n                            </ng-template>\n                        </ng-template>\n                        <li *ngIf=\"filter && (!optionsToDisplay || (optionsToDisplay && optionsToDisplay.length === 0))\" class=\"p-dropdown-empty-message\">{{emptyFilterMessage}}</li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('overlayAnimation', [\n            transition(':enter', [\n                style({opacity: 0, transform: 'scaleY(0.8)'}),\n                animate('{{showTransitionParams}}')\n            ]),\n            transition(':leave', [\n                animate('{{hideTransitionParams}}', style({ opacity: 0 }))\n            ])\n        ])\n    ],\n    host: {\n        '[class.p-inputwrapper-filled]': 'filled',\n        '[class.p-inputwrapper-focus]': 'focused'\n    },\n    providers: [DROPDOWN_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./dropdown.css']\n})\nexport class Dropdown implements OnInit,AfterViewInit,AfterContentInit,AfterViewChecked,OnDestroy,ControlValueAccessor {\n\n    @Input() scrollHeight: string = '200px';\n\n    @Input() filter: boolean;\n\n    @Input() name: string;\n\n    @Input() style: any;\n\n    @Input() panelStyle: any;\n\n    @Input() styleClass: string;\n\n    @Input() panelStyleClass: string;\n\n    @Input() readonly: boolean;\n\n    @Input() required: boolean;\n\n    @Input() editable: boolean;\n\n    @Input() appendTo: any;\n\n    @Input() tabindex: number;\n\n    @Input() placeholder: string;\n\n    @Input() filterPlaceholder: string;\n\n    @Input() filterLocale: string;\n\n    @Input() inputId: string;\n\n    @Input() selectId: string;\n\n    @Input() dataKey: string;\n\n    @Input() filterBy: string = 'label';\n\n    @Input() autofocus: boolean;\n\n    @Input() resetFilterOnHide: boolean = false;\n\n    @Input() dropdownIcon: string = 'pi pi-chevron-down';\n\n    @Input() optionLabel: string;\n\n    @Input() autoDisplayFirst: boolean = true;\n\n    @Input() group: boolean;\n\n    @Input() showClear: boolean;\n\n    @Input() emptyFilterMessage: string = 'No results found';\n\n    @Input() virtualScroll: boolean;\n\n    @Input() itemSize: number;\n\n    @Input() autoZIndex: boolean = true;\n\n    @Input() baseZIndex: number = 0;\n\n    @Input() showTransitionOptions: string = '.12s cubic-bezier(0, 0, 0.2, 1)';\n\n    @Input() hideTransitionOptions: string = '.1s linear';\n\n    @Input() ariaFilterLabel: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() filterMatchMode: string = \"contains\";\n\n    @Input() maxlength: number;\n\n    @Input() tooltip: string = '';\n\n    @Input() tooltipPosition: string = 'right';\n\n    @Input() tooltipPositionStyle: string = 'absolute';\n\n    @Input() tooltipStyleClass: string;\n\n    @Input() autofocusFilter: boolean = true;\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n\n    @Output() onShow: EventEmitter<any> = new EventEmitter();\n\n    @Output() onHide: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('container') containerViewChild: ElementRef;\n\n    @ViewChild('filter') filterViewChild: ElementRef;\n\n    @ViewChild('in') accessibleViewChild: ElementRef;\n\n    @ViewChild(CdkVirtualScrollViewport) viewPort: CdkVirtualScrollViewport;\n\n    @ViewChild('editableInput') editableInputViewChild: ElementRef;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    private _disabled: boolean;\n\n    @Input() get disabled(): boolean {\n        return this._disabled;\n    };\n\n    set disabled(_disabled: boolean) {\n        if (_disabled)\n            this.focused = false;\n\n        this._disabled = _disabled;\n        if (!(this.cd as ViewRef).destroyed) {\n            this.cd.detectChanges();\n        }\n    }\n\n    overlay: HTMLDivElement;\n\n    itemsWrapper: HTMLDivElement;\n\n    itemTemplate: TemplateRef<any>;\n\n    groupTemplate: TemplateRef<any>;\n\n    selectedItemTemplate: TemplateRef<any>;\n\n    selectedOption: any;\n\n    _options: any[];\n\n    value: any;\n\n    onModelChange: Function = () => {};\n\n    onModelTouched: Function = () => {};\n\n    optionsToDisplay: any[];\n\n    hover: boolean;\n\n    focused: boolean;\n\n    filled: boolean;\n\n    overlayVisible: boolean;\n\n    documentClickListener: any;\n\n    optionsChanged: boolean;\n\n    panel: HTMLDivElement;\n\n    dimensionsUpdated: boolean;\n\n    hoveredItem: any;\n\n    selectedOptionUpdated: boolean;\n\n    filterValue: string;\n\n    searchValue: string;\n\n    searchIndex: number;\n\n    searchTimeout: any;\n\n    previousSearchChar: string;\n\n    currentSearchChar: string;\n\n    documentResizeListener: any;\n\n    virtualAutoScrolled: boolean;\n\n    virtualScrollSelectedIndex: number;\n\n    viewPortOffsetTop: number = 0;\n\n    preventModelTouched: boolean;\n\n    constructor(public el: ElementRef, public renderer: Renderer2, public cd: ChangeDetectorRef, public zone: NgZone) {}\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'item':\n                    this.itemTemplate = item.template;\n                break;\n\n                case 'selectedItem':\n                    this.selectedItemTemplate = item.template;\n                break;\n\n                case 'group':\n                    this.groupTemplate = item.template;\n                break;\n\n                default:\n                    this.itemTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    ngOnInit() {\n        this.optionsToDisplay = this.options;\n        this.updateSelectedOption(null);\n    }\n\n    @Input() get options(): any[] {\n        return this._options;\n    }\n\n    set options(val: any[]) {\n        let opts = this.optionLabel ? ObjectUtils.generateSelectItems(val, this.optionLabel) : val;\n        this._options = opts;\n        this.optionsToDisplay = this._options;\n        this.updateSelectedOption(this.value);\n        this.optionsChanged = true;\n        this.updateFilledState();\n\n        if (this.filterValue && this.filterValue.length) {\n            this.activateFilter();\n        }\n    }\n\n    ngAfterViewInit()Â {\n        if (this.editable) {\n            this.updateEditableLabel();\n        }\n    }\n\n    get label(): string {\n        return (this.selectedOption ? this.selectedOption.label : null);\n    }\n\n    updateEditableLabel(): void {\n        if (this.editableInputViewChild && this.editableInputViewChild.nativeElement) {\n            this.editableInputViewChild.nativeElement.value = (this.selectedOption ? this.selectedOption.label : this.value||'');\n        }\n    }\n\n    onItemClick(event) {\n        const option = event.option;\n\n        if (!option.disabled) {\n            this.selectItem(event, option);\n            this.accessibleViewChild.nativeElement.focus();\n        }\n\n        setTimeout(() => {\n            this.hide(event);\n        }, 150);\n    }\n\n    selectItem(event, option) {\n        if (this.selectedOption != option) {\n            this.selectedOption = option;\n            this.value = option.value;\n            this.filled = true;\n\n            this.onModelChange(this.value);\n            this.updateEditableLabel();\n            this.onChange.emit({\n                originalEvent: event.originalEvent,\n                value: this.value\n            });\n\n            if (this.virtualScroll) {\n                setTimeout(() => {\n                    this.viewPortOffsetTop = this.viewPort ? this.viewPort.measureScrollOffset() : 0;\n                }, 1);\n            }\n        }\n    }\n\n    ngAfterViewChecked() {\n        if (this.optionsChanged && this.overlayVisible) {\n            this.optionsChanged = false;\n\n            if (this.virtualScroll) {\n                this.updateVirtualScrollSelectedIndex(true);\n            }\n\n            this.zone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    this.alignOverlay();\n                }, 1);\n            });\n        }\n\n        if (this.selectedOptionUpdated && this.itemsWrapper) {\n            if (this.virtualScroll && this.viewPort) {\n                let range = this.viewPort.getRenderedRange();\n                this.updateVirtualScrollSelectedIndex(false);\n\n                if (range.start > this.virtualScrollSelectedIndex || range.end < this.virtualScrollSelectedIndex) {\n                    this.viewPort.scrollToIndex(this.virtualScrollSelectedIndex);\n                }\n            }\n\n            let selectedItem = DomHandler.findSingle(this.overlay, 'li.p-highlight');\n            if (selectedItem) {\n                DomHandler.scrollInView(this.itemsWrapper, DomHandler.findSingle(this.overlay, 'li.p-highlight'));\n            }\n            this.selectedOptionUpdated = false;\n        }\n    }\n\n    writeValue(value: any): void {\n        if (this.filter) {\n            this.resetFilter();\n        }\n\n        this.value = value;\n        this.updateSelectedOption(value);\n        this.updateEditableLabel();\n        this.updateFilledState();\n        this.cd.markForCheck();\n    }\n\n    resetFilter(): void {\n        this.filterValue = null;\n\n        if (this.filterViewChild && this.filterViewChild.nativeElement) {\n            this.filterViewChild.nativeElement.value = '';\n        }\n\n        this.optionsToDisplay = this.options;\n    }\n\n    updateSelectedOption(val: any): void {\n        this.selectedOption = this.findOption(val, this.optionsToDisplay);\n        if (this.autoDisplayFirst && !this.placeholder && !this.selectedOption && this.optionsToDisplay && this.optionsToDisplay.length && !this.editable) {\n            this.selectedOption = this.optionsToDisplay[0];\n        }\n        this.selectedOptionUpdated = true;\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n        this.cd.markForCheck();\n    }\n\n    onMouseclick(event) {\n        if (this.disabled || this.readonly || this.isInputClick(event)) {\n            return;\n        }\n\n        this.onClick.emit(event);\n        this.accessibleViewChild.nativeElement.focus();\n\n        if (this.overlayVisible)\n            this.hide(event);\n        else\n            this.show();\n\n        this.cd.detectChanges();\n    }\n\n    isInputClick(event): boolean {\n        return DomHandler.hasClass(event.target, 'p-dropdown-clear-icon') ||\n            event.target.isSameNode(this.accessibleViewChild.nativeElement) ||\n            (this.editableInputViewChild && event.target.isSameNode(this.editableInputViewChild.nativeElement));\n    }\n\n    isOutsideClicked(event: Event): boolean {\n        return !(this.el.nativeElement.isSameNode(event.target) || this.el.nativeElement.contains(event.target) || (this.overlay && this.overlay.contains(<Node> event.target)));\n    }\n\n    onEditableInputClick() {\n        this.bindDocumentClickListener();\n    }\n\n    onEditableInputFocus(event) {\n        this.focused = true;\n        this.hide(event);\n        this.onFocus.emit(event);\n    }\n\n    onEditableInputChange(event) {\n        this.value = event.target.value;\n        this.updateSelectedOption(this.value);\n        this.onModelChange(this.value);\n        this.onChange.emit({\n            originalEvent: event,\n            value: this.value\n        });\n    }\n\n    show() {\n        this.overlayVisible = true;\n    }\n\n    onOverlayAnimationStart(event: AnimationEvent) {\n        switch (event.toState) {\n            case 'visible':\n                this.overlay = event.element;\n                let itemsWrapperSelector = this.virtualScroll ? '.cdk-virtual-scroll-viewport' : '.p-dropdown-items-wrapper';\n                this.itemsWrapper = DomHandler.findSingle(this.overlay, itemsWrapperSelector);\n                this.appendOverlay();\n                if (this.autoZIndex) {\n                    this.overlay.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n                }\n                this.alignOverlay();\n                this.bindDocumentClickListener();\n                this.bindDocumentResizeListener();\n\n                if (this.options && this.options.length) {\n                    if (!this.virtualScroll) {\n                        let selectedListItem = DomHandler.findSingle(this.itemsWrapper, '.p-dropdown-item.p-highlight');\n                        if (selectedListItem) {\n                            DomHandler.scrollInView(this.itemsWrapper, selectedListItem);\n                        }\n                    }\n                }\n\n                if (this.filterViewChild && this.filterViewChild.nativeElement) {\n                    this.preventModelTouched = true;\n\n                    if (this.autofocusFilter) {\n                        this.filterViewChild.nativeElement.focus();\n                    }\n                }\n\n                this.onShow.emit(event);\n            break;\n\n            case 'void':\n                this.onOverlayHide();\n            break;\n        }\n    }\n\n    scrollToSelectedVirtualScrollElement() {\n        if (!this.virtualAutoScrolled) {\n            if (this.viewPortOffsetTop) {\n                this.viewPort.scrollToOffset(this.viewPortOffsetTop);\n            }\n            else if (this.virtualScrollSelectedIndex > -1) {\n                this.viewPort.scrollToIndex(this.virtualScrollSelectedIndex);\n            }\n        }\n\n        this.virtualAutoScrolled = true;\n    }\n\n    updateVirtualScrollSelectedIndex(resetOffset) {\n        if (this.selectedOption && this.optionsToDisplay && this.optionsToDisplay.length) {\n            if (resetOffset) {\n                this.viewPortOffsetTop = 0;\n            }\n\n            this.virtualScrollSelectedIndex = this.findOptionIndex(this.selectedOption.value, this.optionsToDisplay);\n        }\n    }\n\n    appendOverlay() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.overlay);\n            else\n                DomHandler.appendChild(this.overlay, this.appendTo);\n\n            if (!this.overlay.style.minWidth) {\n                this.overlay.style.minWidth = DomHandler.getWidth(this.containerViewChild.nativeElement) + 'px';\n            }\n        }\n    }\n\n    restoreOverlayAppend() {\n        if (this.overlay && this.appendTo) {\n            this.el.nativeElement.appendChild(this.overlay);\n        }\n    }\n\n    hide(event) {\n        this.overlayVisible = false;\n\n        if (this.filter && this.resetFilterOnHide) {\n            this.resetFilter();\n        }\n\n        if (this.virtualScroll) {\n            this.virtualAutoScrolled = false;\n        }\n\n        this.cd.markForCheck();\n        this.onHide.emit(event);\n    }\n\n    alignOverlay() {\n        if (this.overlay) {\n            if (this.appendTo)\n                DomHandler.absolutePosition(this.overlay, this.containerViewChild.nativeElement);\n            else\n                DomHandler.relativePosition(this.overlay, this.containerViewChild.nativeElement);\n        }\n    }\n\n    onInputFocus(event) {\n        this.focused = true;\n        this.onFocus.emit(event);\n    }\n\n    onInputBlur(event) {\n        this.focused = false;\n        this.onBlur.emit(event);\n\n        if (!this.preventModelTouched) {\n            this.onModelTouched();\n        }\n        this.preventModelTouched = false;\n    }\n\n    findPrevEnabledOption(index) {\n        let prevEnabledOption;\n\n        if (this.optionsToDisplay && this.optionsToDisplay.length) {\n            for (let i = (index - 1); 0 <= i; i--) {\n                let option = this.optionsToDisplay[i];\n                if (option.disabled) {\n                    continue;\n                }\n                else {\n                    prevEnabledOption = option;\n                    break;\n                }\n            }\n\n            if (!prevEnabledOption) {\n                for (let i = this.optionsToDisplay.length - 1; i >= index ; i--) {\n                    let option = this.optionsToDisplay[i];\n                    if (option.disabled) {\n                        continue;\n                    }\n                    else {\n                        prevEnabledOption = option;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return prevEnabledOption;\n    }\n\n    findNextEnabledOption(index) {\n        let nextEnabledOption;\n\n        if (this.optionsToDisplay && this.optionsToDisplay.length) {\n            for (let i = (index + 1); index < (this.optionsToDisplay.length - 1); i++) {\n                let option = this.optionsToDisplay[i];\n                if (option.disabled) {\n                    continue;\n                }\n                else {\n                    nextEnabledOption = option;\n                    break;\n                }\n            }\n\n            if (!nextEnabledOption) {\n                for (let i = 0; i < index; i++) {\n                    let option = this.optionsToDisplay[i];\n                    if (option.disabled) {\n                        continue;\n                    }\n                    else {\n                        nextEnabledOption = option;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return nextEnabledOption;\n    }\n\n    onKeydown(event: KeyboardEvent, search: boolean) {\n        if (this.readonly || !this.optionsToDisplay || this.optionsToDisplay.length === null) {\n            return;\n        }\n\n        switch(event.which) {\n            //down\n            case 40:\n                if (!this.overlayVisible && event.altKey) {\n                    this.show();\n                }\n                else {\n                    if (this.group) {\n                        let selectedItemIndex = this.selectedOption ? this.findOptionGroupIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n\n                        if (selectedItemIndex !== -1) {\n                            let nextItemIndex = selectedItemIndex.itemIndex + 1;\n                            if (nextItemIndex < (this.optionsToDisplay[selectedItemIndex.groupIndex].items.length)) {\n                                this.selectItem(event, this.optionsToDisplay[selectedItemIndex.groupIndex].items[nextItemIndex]);\n                                this.selectedOptionUpdated = true;\n                            }\n                            else if (this.optionsToDisplay[selectedItemIndex.groupIndex + 1]) {\n                                this.selectItem(event, this.optionsToDisplay[selectedItemIndex.groupIndex + 1].items[0]);\n                                this.selectedOptionUpdated = true;\n                            }\n                        }\n                        else {\n                            this.selectItem(event, this.optionsToDisplay[0].items[0]);\n                        }\n                    }\n                    else {\n                        let selectedItemIndex = this.selectedOption ? this.findOptionIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n                        let nextEnabledOption = this.findNextEnabledOption(selectedItemIndex);\n                        if (nextEnabledOption) {\n                            this.selectItem(event, nextEnabledOption);\n                            this.selectedOptionUpdated = true;\n                        }\n                    }\n                }\n\n                event.preventDefault();\n\n            break;\n\n            //up\n            case 38:\n                if (this.group) {\n                    let selectedItemIndex = this.selectedOption ? this.findOptionGroupIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n                    if (selectedItemIndex !== -1) {\n                        let prevItemIndex = selectedItemIndex.itemIndex - 1;\n                        if (prevItemIndex >= 0) {\n                            this.selectItem(event, this.optionsToDisplay[selectedItemIndex.groupIndex].items[prevItemIndex]);\n                            this.selectedOptionUpdated = true;\n                        }\n                        else if (prevItemIndex < 0) {\n                            let prevGroup = this.optionsToDisplay[selectedItemIndex.groupIndex - 1];\n                            if (prevGroup) {\n                                this.selectItem(event, prevGroup.items[prevGroup.items.length - 1]);\n                                this.selectedOptionUpdated = true;\n                            }\n                        }\n                    }\n                }\n                else {\n                    let selectedItemIndex = this.selectedOption ? this.findOptionIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n                    let prevEnabledOption = this.findPrevEnabledOption(selectedItemIndex);\n                    if (prevEnabledOption) {\n                        this.selectItem(event, prevEnabledOption);\n                        this.selectedOptionUpdated = true;\n                    }\n                }\n\n                event.preventDefault();\n            break;\n\n            //space\n            case 32:\n            case 32:\n                if (!this.overlayVisible){\n                    this.show();\n                    event.preventDefault();\n                }\n            break;\n\n            //enter\n            case 13:\n                if (!this.filter || (this.optionsToDisplay && this.optionsToDisplay.length > 0)) {\n                    this.hide(event);\n                }\n\n                event.preventDefault();\n            break;\n\n            //escape and tab\n            case 27:\n            case 9:\n                this.hide(event);\n            break;\n\n            //search item based on keyboard input\n            default:\n                if (search) {\n                    this.search(event);\n                }\n            break;\n        }\n    }\n\n    search(event) {\n        if (this.searchTimeout) {\n            clearTimeout(this.searchTimeout);\n        }\n\n        const char = event.key;\n        this.previousSearchChar = this.currentSearchChar;\n        this.currentSearchChar = char;\n\n        if (this.previousSearchChar === this.currentSearchChar)\n            this.searchValue = this.currentSearchChar;\n        else\n            this.searchValue = this.searchValue ? this.searchValue + char : char;\n\n        let newOption;\n        if (this.group) {\n            let searchIndex = this.selectedOption ? this.findOptionGroupIndex(this.selectedOption.value, this.optionsToDisplay) : {groupIndex: 0, itemIndex: 0};\n            newOption = this.searchOptionWithinGroup(searchIndex);\n        }\n        else {\n            let searchIndex = this.selectedOption ? this.findOptionIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n            newOption = this.searchOption(++searchIndex);\n        }\n\n        if (newOption && !newOption.disabled) {\n            this.selectItem(event, newOption);\n            this.selectedOptionUpdated = true;\n        }\n\n        this.searchTimeout = setTimeout(() => {\n            this.searchValue = null;\n        }, 250);\n    }\n\n    searchOption(index) {\n        let option;\n\n        if (this.searchValue) {\n            option = this.searchOptionInRange(index, this.optionsToDisplay.length);\n\n            if (!option) {\n                option = this.searchOptionInRange(0, index);\n            }\n        }\n\n        return option;\n    }\n\n    searchOptionInRange(start, end) {\n        for (let i = start; i < end; i++) {\n            let opt = this.optionsToDisplay[i];\n            if (opt.label.toLocaleLowerCase(this.filterLocale).startsWith((this.searchValue as any).toLocaleLowerCase(this.filterLocale)) && !opt.disabled) {\n                return opt;\n            }\n        }\n\n        return null;\n    }\n\n    searchOptionWithinGroup(index) {\n        let option;\n\n        if (this.searchValue) {\n            for (let i = index.groupIndex; i < this.optionsToDisplay.length; i++) {\n                for (let j = (index.groupIndex === i) ? (index.itemIndex + 1) : 0; j < this.optionsToDisplay[i].items.length; j++) {\n                    let opt = this.optionsToDisplay[i].items[j];\n                    if (opt.label.toLocaleLowerCase(this.filterLocale).startsWith((this.searchValue as any).toLocaleLowerCase(this.filterLocale)) && !opt.disabled) {\n                        return opt;\n                    }\n                }\n            }\n\n            if (!option) {\n                for (let i = 0; i <= index.groupIndex; i++) {\n                    for (let j = 0; j < ((index.groupIndex === i) ? index.itemIndex : this.optionsToDisplay[i].items.length); j++) {\n                        let opt = this.optionsToDisplay[i].items[j];\n                        if (opt.label.toLocaleLowerCase(this.filterLocale).startsWith((this.searchValue as any).toLocaleLowerCase(this.filterLocale)) && !opt.disabled) {\n                            return opt;\n                        }\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    findOptionIndex(val: any, opts: any[]): number {\n        let index: number = -1;\n        if (opts) {\n            for (let i = 0; i < opts.length; i++) {\n                if ((val == null && opts[i].value == null) ||Â ObjectUtils.equals(val, opts[i].value, this.dataKey)) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    findOptionGroupIndex(val: any, opts: any[]): any {\n        let groupIndex, itemIndex;\n\n        if (opts) {\n            for (let i = 0; i < opts.length; i++) {\n                groupIndex = i;\n                itemIndex = this.findOptionIndex(val, opts[i].items);\n\n                if (itemIndex !== -1) {\n                    break;\n                }\n            }\n        }\n\n        if (itemIndex !== -1) {\n            return {groupIndex: groupIndex, itemIndex: itemIndex};\n        }\n        else {\n            return -1;\n        }\n    }\n\n    findOption(val: any, opts: any[], inGroup?: boolean): SelectItem {\n        if (this.group && !inGroup) {\n            let opt: SelectItem;\n            if (opts && opts.length) {\n                for (let optgroup of opts) {\n                    opt = this.findOption(val, optgroup.items, true);\n                    if (opt) {\n                        break;\n                    }\n                }\n            }\n            return opt;\n        }\n        else {\n            let index: number = this.findOptionIndex(val, opts);\n            return (index != -1) ? opts[index] : null;\n        }\n    }\n\n    onFilter(event): void {\n        let inputValue = event.target.value;\n        if (inputValue && inputValue.length) {\n            this.filterValue = inputValue;\n            this.activateFilter();\n        }\n        else {\n            this.filterValue = null;\n            this.optionsToDisplay = this.options;\n        }\n\n        this.optionsChanged = true;\n    }\n\n    activateFilter() {\n        let searchFields: string[] = this.filterBy.split(',');\n\n        if (this.options && this.options.length) {\n            if (this.group) {\n                let filteredGroups = [];\n                for (let optgroup of this.options) {\n                    let filteredSubOptions = FilterUtils.filter(optgroup.items, searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n                    if (filteredSubOptions && filteredSubOptions.length) {\n                        filteredGroups.push({\n                            label: optgroup.label,\n                            value: optgroup.value,\n                            items: filteredSubOptions\n                        });\n                    }\n                }\n\n                this.optionsToDisplay = filteredGroups;\n            }\n            else {\n                this.optionsToDisplay = FilterUtils.filter(this.options, searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n            }\n\n            this.optionsChanged = true;\n        }\n    }\n\n    applyFocus(): void {\n        if (this.editable)\n            DomHandler.findSingle(this.el.nativeElement, '.p-dropdown-label.p-inputtext').focus();\n        else\n            DomHandler.findSingle(this.el.nativeElement, 'input[readonly]').focus();\n    }\n\n    focus(): void {\n        this.applyFocus();\n    }\n\n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            const documentTarget: any = this.el ? this.el.nativeElement.ownerDocument : 'document';\n\n            this.documentClickListener = this.renderer.listen(documentTarget, 'click', (event) => {\n                if (this.isOutsideClicked(event)) {\n                    this.hide(event);\n                    this.unbindDocumentClickListener();\n                }\n\n                this.cd.markForCheck();\n            });\n        }\n    }\n\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n\n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n\n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n\n    onWindowResize() {\n        if (!DomHandler.isAndroid()) {\n            this.hide(event);\n        }\n    }\n\n    updateFilledState() {\n        this.filled = (this.selectedOption != null);\n    }\n\n    clear(event: Event) {\n        this.value = null;\n        this.onModelChange(this.value);\n        this.onChange.emit({\n            originalEvent: event,\n            value: this.value\n        });\n        this.updateSelectedOption(this.value);\n        this.updateEditableLabel();\n        this.updateFilledState();\n    }\n\n    onOverlayHide() {\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.overlay = null;\n        this.itemsWrapper = null;\n        this.onModelTouched();\n    }\n\n    ngOnDestroy() {\n        this.restoreOverlayAppend();\n        this.onOverlayHide();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,SharedModule,ScrollingModule,TooltipModule,RippleModule],\n    exports: [Dropdown,SharedModule,ScrollingModule],\n    declarations: [Dropdown,DropdownItem]\n})\nexport class DropdownModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}
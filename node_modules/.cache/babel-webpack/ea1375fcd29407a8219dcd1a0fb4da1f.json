{"ast":null,"code":"import _classCallCheck from \"C:/Documentos/workspaces/isac/frontend-server/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Documentos/workspaces/isac/frontend-server/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Directive, ElementRef, Input, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ContentChildren, Output, NgModule } from '@angular/core';\nimport { DomHandler } from 'primeng/dom';\nimport { CommonModule } from '@angular/common';\nimport { RippleModule } from 'primeng/ripple';\nimport { PrimeTemplate } from 'primeng/api';\n\nvar ButtonDirective = /*#__PURE__*/function () {\n  function ButtonDirective(el) {\n    _classCallCheck(this, ButtonDirective);\n\n    this.el = el;\n    this.iconPos = 'left';\n  }\n\n  _createClass(ButtonDirective, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      this._initialStyleClass = this.el.nativeElement.className;\n      DomHandler.addMultipleClasses(this.el.nativeElement, this.getStyleClass());\n\n      if (this.icon) {\n        var iconElement = document.createElement(\"span\");\n        iconElement.className = 'p-button-icon';\n        iconElement.setAttribute(\"aria-hidden\", \"true\");\n        var iconPosClass = this.label ? 'p-button-icon-' + this.iconPos : null;\n\n        if (iconPosClass) {\n          DomHandler.addClass(iconElement, iconPosClass);\n        }\n\n        DomHandler.addMultipleClasses(iconElement, this.icon);\n        this.el.nativeElement.appendChild(iconElement);\n      }\n\n      var labelElement = document.createElement(\"span\");\n\n      if (this.icon && !this.label) {\n        labelElement.setAttribute('aria-hidden', 'true');\n      }\n\n      labelElement.className = 'p-button-label';\n      labelElement.appendChild(document.createTextNode(this.label || '&nbsp;'));\n      this.el.nativeElement.appendChild(labelElement);\n      this.initialized = true;\n    }\n  }, {\n    key: \"getStyleClass\",\n    value: function getStyleClass() {\n      var styleClass = 'p-button p-component';\n\n      if (this.icon && !this.label) {\n        styleClass = styleClass + ' p-button-icon-only';\n      }\n\n      return styleClass;\n    }\n  }, {\n    key: \"setStyleClass\",\n    value: function setStyleClass() {\n      var styleClass = this.getStyleClass();\n      this.el.nativeElement.className = styleClass + ' ' + this._initialStyleClass;\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      while (this.el.nativeElement.hasChildNodes()) {\n        this.el.nativeElement.removeChild(this.el.nativeElement.lastChild);\n      }\n\n      this.initialized = false;\n    }\n  }, {\n    key: \"label\",\n    get: function get() {\n      return this._label;\n    },\n    set: function set(val) {\n      this._label = val;\n\n      if (this.initialized) {\n        DomHandler.findSingle(this.el.nativeElement, '.p-button-label').textContent = this._label || '&nbsp;';\n        this.setStyleClass();\n      }\n    }\n  }, {\n    key: \"icon\",\n    get: function get() {\n      return this._icon;\n    },\n    set: function set(val) {\n      this._icon = val;\n\n      if (this.initialized) {\n        if (this.iconPos) DomHandler.findSingle(this.el.nativeElement, '.p-button-icon').className = 'p-button-icon p-button-icon-' + this.iconPos + ' ' + this._icon;else DomHandler.findSingle(this.el.nativeElement, '.p-button-icon').className = 'p-button-icon ' + this._icon;\n        this.setStyleClass();\n      }\n    }\n  }]);\n\n  return ButtonDirective;\n}();\n\nButtonDirective.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[pButton]'\n  }]\n}];\n\nButtonDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nButtonDirective.propDecorators = {\n  iconPos: [{\n    type: Input\n  }],\n  label: [{\n    type: Input\n  }],\n  icon: [{\n    type: Input\n  }]\n};\n\nvar Button = /*#__PURE__*/function () {\n  function Button() {\n    _classCallCheck(this, Button);\n\n    this.type = \"button\";\n    this.iconPos = 'left';\n    this.onClick = new EventEmitter();\n    this.onFocus = new EventEmitter();\n    this.onBlur = new EventEmitter();\n  }\n\n  _createClass(Button, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this = this;\n\n      this.templates.forEach(function (item) {\n        switch (item.getType()) {\n          case 'content':\n            _this.contentTemplate = item.template;\n            break;\n\n          default:\n            _this.contentTemplate = item.template;\n            break;\n        }\n      });\n    }\n  }]);\n\n  return Button;\n}();\n\nButton.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'p-button',\n    template: \"\\n        <button [attr.type]=\\\"type\\\" [class]=\\\"styleClass\\\" [ngStyle]=\\\"style\\\" [disabled]=\\\"disabled\\\"\\n            [ngClass]=\\\"{'p-button p-component':true,\\n                        'p-button-icon-only': (icon && !label),\\n                        'p-button-vertical': (iconPos === 'top' || iconPos === 'bottom') && label}\\\"\\n                        (click)=\\\"onClick.emit($event)\\\" (focus)=\\\"onFocus.emit($event)\\\" (blur)=\\\"onBlur.emit($event)\\\" pRipple>\\n            <ng-content></ng-content>\\n            <ng-container *ngTemplateOutlet=\\\"contentTemplate\\\"></ng-container>\\n            <span [ngClass]=\\\"{'p-button-icon': true,\\n                        'p-button-icon-left': iconPos === 'left' && label,\\n                        'p-button-icon-right': iconPos === 'right' && label,\\n                        'p-button-icon-top': iconPos === 'top' && label,\\n                        'p-button-icon-bottom': iconPos === 'bottom' && label}\\\"\\n                        [class]=\\\"icon\\\" *ngIf=\\\"icon\\\" [attr.aria-hidden]=\\\"true\\\"></span>\\n            <span class=\\\"p-button-label\\\" [attr.aria-hidden]=\\\"icon && !label\\\">{{label||'&nbsp;'}}</span>\\n            <span [ngClass]=\\\"'p-badge'\\\" *ngIf=\\\"badge\\\" [class]=\\\"badgeClass\\\">{{badge}}</span>\\n        </button>\\n    \",\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n  }]\n}];\nButton.propDecorators = {\n  type: [{\n    type: Input\n  }],\n  iconPos: [{\n    type: Input\n  }],\n  icon: [{\n    type: Input\n  }],\n  badge: [{\n    type: Input\n  }],\n  label: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  style: [{\n    type: Input\n  }],\n  styleClass: [{\n    type: Input\n  }],\n  badgeClass: [{\n    type: Input\n  }],\n  templates: [{\n    type: ContentChildren,\n    args: [PrimeTemplate]\n  }],\n  onClick: [{\n    type: Output\n  }],\n  onFocus: [{\n    type: Output\n  }],\n  onBlur: [{\n    type: Output\n  }]\n};\n\nvar ButtonModule = function ButtonModule() {\n  _classCallCheck(this, ButtonModule);\n};\n\nButtonModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, RippleModule],\n    exports: [ButtonDirective, Button],\n    declarations: [ButtonDirective, Button]\n  }]\n}];\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Button, ButtonDirective, ButtonModule };","map":{"version":3,"sources":["../../src/app/components/button/button.ts","../../src/app/components/button/primeng-button.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Directive,Component,ElementRef,EventEmitter,AfterViewInit,Output,OnDestroy,Input,ChangeDetectionStrategy, ViewEncapsulation, ContentChildren, AfterContentInit, TemplateRef, QueryList} from '@angular/core';\nimport {DomHandler} from 'primeng/dom';\nimport {CommonModule} from '@angular/common';\nimport {RippleModule} from 'primeng/ripple'; \nimport {PrimeTemplate} from 'primeng/api'; \n\n@Directive({\n    selector: '[pButton]'\n})\nexport class ButtonDirective implements AfterViewInit, OnDestroy {\n\n    @Input() iconPos: 'left' | 'right' | 'top' | 'bottom' = 'left';\n            \n    public _label: string;\n    \n    public _icon: string;\n            \n    public initialized: boolean;\n    \n    public _initialStyleClass: string;\n\n    constructor(public el: ElementRef) {}\n    \n    ngAfterViewInit() {\n        this._initialStyleClass = this.el.nativeElement.className;\n        DomHandler.addMultipleClasses(this.el.nativeElement, this.getStyleClass());\n\n        if (this.icon) {\n            let iconElement = document.createElement(\"span\");\n            iconElement.className = 'p-button-icon';\n            iconElement.setAttribute(\"aria-hidden\", \"true\");\n            let iconPosClass = this.label ? 'p-button-icon-' + this.iconPos : null;\n            if (iconPosClass) {\n                DomHandler.addClass(iconElement, iconPosClass);\n            }\n            DomHandler.addMultipleClasses(iconElement, this.icon);\n            this.el.nativeElement.appendChild(iconElement);\n        }\n        \n        let labelElement = document.createElement(\"span\");\n        if (this.icon && !this.label) {\n            labelElement.setAttribute('aria-hidden', 'true');\n        }\n        labelElement.className = 'p-button-label';\n        labelElement.appendChild(document.createTextNode(this.label||'&nbsp;'));\n        this.el.nativeElement.appendChild(labelElement);\n        this.initialized = true;\n    }\n        \n    getStyleClass(): string {\n        let styleClass = 'p-button p-component';\n        if (this.icon && !this.label) {\n            styleClass = styleClass + ' p-button-icon-only';\n        }\n        \n        return styleClass;\n    }\n\n    setStyleClass() {\n        let styleClass = this.getStyleClass();\n        this.el.nativeElement.className = styleClass + ' ' + this._initialStyleClass;\n    }\n    \n    @Input() get label(): string {\n        return this._label;\n    }\n\n    set label(val: string) {\n        this._label = val;\n        \n        if (this.initialized) {\n            DomHandler.findSingle(this.el.nativeElement, '.p-button-label').textContent = this._label || '&nbsp;';\n            this.setStyleClass();\n        }\n    }\n    \n    @Input() get icon(): string {\n        return this._icon;\n    }\n\n    set icon(val: string) {\n        this._icon = val;\n        \n        if (this.initialized) {\n            if (this.iconPos)\n                DomHandler.findSingle(this.el.nativeElement, '.p-button-icon').className = 'p-button-icon p-button-icon-' + this.iconPos + ' ' + this._icon;\n            else\n                DomHandler.findSingle(this.el.nativeElement, '.p-button-icon').className = 'p-button-icon ' + this._icon;\n\n            this.setStyleClass();\n        }\n    }\n        \n    ngOnDestroy() {\n        while(this.el.nativeElement.hasChildNodes()) {\n            this.el.nativeElement.removeChild(this.el.nativeElement.lastChild);\n        }\n        \n        this.initialized = false;\n    }\n}\n\n@Component({\n    selector: 'p-button',\n    template: `\n        <button [attr.type]=\"type\" [class]=\"styleClass\" [ngStyle]=\"style\" [disabled]=\"disabled\"\n            [ngClass]=\"{'p-button p-component':true,\n                        'p-button-icon-only': (icon && !label),\n                        'p-button-vertical': (iconPos === 'top' || iconPos === 'bottom') && label}\"\n                        (click)=\"onClick.emit($event)\" (focus)=\"onFocus.emit($event)\" (blur)=\"onBlur.emit($event)\" pRipple>\n            <ng-content></ng-content>\n            <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n            <span [ngClass]=\"{'p-button-icon': true,\n                        'p-button-icon-left': iconPos === 'left' && label,\n                        'p-button-icon-right': iconPos === 'right' && label,\n                        'p-button-icon-top': iconPos === 'top' && label,\n                        'p-button-icon-bottom': iconPos === 'bottom' && label}\"\n                        [class]=\"icon\" *ngIf=\"icon\" [attr.aria-hidden]=\"true\"></span>\n            <span class=\"p-button-label\" [attr.aria-hidden]=\"icon && !label\">{{label||'&nbsp;'}}</span>\n            <span [ngClass]=\"'p-badge'\" *ngIf=\"badge\" [class]=\"badgeClass\">{{badge}}</span>\n        </button>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class Button implements AfterContentInit {\n\n    @Input() type: string = \"button\";\n\n    @Input() iconPos: string = 'left';\n\n    @Input() icon: string;\n\n    @Input() badge: string;\n\n    @Input() label: string;\n\n    @Input() disabled: boolean;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() badgeClass: string;\n\n    contentTemplate: TemplateRef<any>;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'content':\n                    this.contentTemplate = item.template;\n                break;\n                \n                default:\n                    this.contentTemplate = item.template;\n                break;\n            }\n        });\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,RippleModule],\n    exports: [ButtonDirective,Button],\n    declarations: [ButtonDirective,Button]\n})\nexport class ButtonModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}
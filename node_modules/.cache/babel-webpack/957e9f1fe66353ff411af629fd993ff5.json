{"ast":null,"code":"import _toConsumableArray from \"C:/Documentos/workspaces/isac/frontend-server/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:/Documentos/workspaces/isac/frontend-server/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Documentos/workspaces/isac/frontend-server/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, ElementRef, ChangeDetectorRef, Input, ContentChildren, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { MessageService, PrimeTemplate } from 'primeng/api';\nimport { RippleModule } from 'primeng/ripple';\n\nvar Messages = /*#__PURE__*/function () {\n  function Messages(messageService, el, cd) {\n    _classCallCheck(this, Messages);\n\n    this.messageService = messageService;\n    this.el = el;\n    this.cd = cd;\n    this.closable = true;\n    this.enableService = true;\n    this.escape = true;\n    this.showTransitionOptions = '300ms ease-out';\n    this.hideTransitionOptions = '200ms cubic-bezier(0.86, 0, 0.07, 1)';\n    this.valueChange = new EventEmitter();\n  }\n\n  _createClass(Messages, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this = this;\n\n      this.templates.forEach(function (item) {\n        switch (item.getType()) {\n          case 'content':\n            _this.contentTemplate = item.template;\n            break;\n\n          default:\n            _this.contentTemplate = item.template;\n            break;\n        }\n      });\n\n      if (this.messageService && this.enableService && !this.contentTemplate) {\n        this.messageSubscription = this.messageService.messageObserver.subscribe(function (messages) {\n          if (messages) {\n            if (messages instanceof Array) {\n              var filteredMessages = messages.filter(function (m) {\n                return _this.key === m.key;\n              });\n              _this.value = _this.value ? [].concat(_toConsumableArray(_this.value), _toConsumableArray(filteredMessages)) : _toConsumableArray(filteredMessages);\n            } else if (_this.key === messages.key) {\n              _this.value = _this.value ? [].concat(_toConsumableArray(_this.value), [messages]) : [messages];\n            }\n\n            _this.cd.markForCheck();\n          }\n        });\n        this.clearSubscription = this.messageService.clearObserver.subscribe(function (key) {\n          if (key) {\n            if (_this.key === key) {\n              _this.value = null;\n            }\n          } else {\n            _this.value = null;\n          }\n\n          _this.cd.markForCheck();\n        });\n      }\n    }\n  }, {\n    key: \"hasMessages\",\n    value: function hasMessages() {\n      var parentEl = this.el.nativeElement.parentElement;\n\n      if (parentEl && parentEl.offsetParent) {\n        return this.contentTemplate != null || this.value && this.value.length > 0;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.value = [];\n      this.valueChange.emit(this.value);\n    }\n  }, {\n    key: \"removeMessage\",\n    value: function removeMessage(i) {\n      this.value = this.value.filter(function (msg, index) {\n        return index !== i;\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.messageSubscription) {\n        this.messageSubscription.unsubscribe();\n      }\n\n      if (this.clearSubscription) {\n        this.clearSubscription.unsubscribe();\n      }\n    }\n  }, {\n    key: \"icon\",\n    get: function get() {\n      var severity = this.severity || (this.hasMessages() ? this.value[0].severity : null);\n\n      if (this.hasMessages()) {\n        switch (severity) {\n          case 'success':\n            return 'pi-check';\n            break;\n\n          case 'info':\n            return 'pi-info-circle';\n            break;\n\n          case 'error':\n            return 'pi-times';\n            break;\n\n          case 'warn':\n            return 'pi-exclamation-triangle';\n            break;\n\n          default:\n            return 'pi-info-circle';\n            break;\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return Messages;\n}();\n\nMessages.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'p-messages',\n    template: \"\\n        <div class=\\\"p-messages p-component\\\" role=\\\"alert\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\">\\n            <ng-container *ngIf=\\\"!contentTemplate; else staticMessage\\\">\\n                <div *ngFor=\\\"let msg of value; let i=index\\\" [ngClass]=\\\"'p-message p-message-' + msg.severity\\\" role=\\\"alert\\\" \\n                    [@messageAnimation]=\\\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\\\">\\n                    <div class=\\\"p-message-wrapper\\\">\\n                        <span class=\\\"p-message-icon pi\\\" [ngClass]=\\\"{'pi-info-circle': msg.severity === 'info', \\n                            'pi-check': msg.severity === 'success',\\n                            'pi-exclamation-triangle': msg.severity === 'warn',\\n                            'pi-times-circle': msg.severity === 'error'}\\\"></span>\\n                        <ng-container *ngIf=\\\"!escape; else escapeOut\\\">\\n                            <span *ngIf=\\\"msg.summary\\\" class=\\\"p-message-summary\\\" [innerHTML]=\\\"msg.summary\\\"></span>\\n                            <span *ngIf=\\\"msg.detail\\\" class=\\\"p-message-detail\\\" [innerHTML]=\\\"msg.detail\\\"></span>\\n                        </ng-container>\\n                        <ng-template #escapeOut>\\n                            <span *ngIf=\\\"msg.summary\\\" class=\\\"p-message-summary\\\">{{msg.summary}}</span>\\n                            <span *ngIf=\\\"msg.detail\\\" class=\\\"p-message-detail\\\">{{msg.detail}}</span>\\n                        </ng-template>\\n                        <button class=\\\"p-message-close p-link\\\" (click)=\\\"removeMessage(i)\\\" *ngIf=\\\"closable\\\" type=\\\"button\\\" pRipple>\\n                            <i class=\\\"p-message-close-icon pi pi-times\\\"></i>\\n                        </button>\\n                    </div>\\n                </div>\\n            </ng-container>\\n            <ng-template #staticMessage>\\n                <div [ngClass]=\\\"'p-message p-message-' + severity\\\" role=\\\"alert\\\">\\n                    <div class=\\\"p-message-wrapper\\\">\\n                        <ng-container *ngTemplateOutlet=\\\"contentTemplate\\\"></ng-container>\\n                    </div>\\n                </div>\\n            </ng-template>\\n            </div>\\n    \",\n    animations: [trigger('messageAnimation', [transition(':enter', [style({\n      opacity: 0,\n      transform: 'translateY(-25%)'\n    }), animate('{{showTransitionParams}}')]), transition(':leave', [animate('{{hideTransitionParams}}', style({\n      height: 0,\n      marginTop: 0,\n      marginBottom: 0,\n      marginLeft: 0,\n      marginRight: 0,\n      overflow: 'hidden',\n      opacity: 0\n    }))])])],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styles: [\".p-message-close,.p-message-wrapper{-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex}.p-message-close{-ms-flex-pack:center;justify-content:center}.p-message-close.p-link{margin-left:auto;overflow:hidden;position:relative}\"]\n  }]\n}];\n\nMessages.ctorParameters = function () {\n  return [{\n    type: MessageService,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nMessages.propDecorators = {\n  value: [{\n    type: Input\n  }],\n  closable: [{\n    type: Input\n  }],\n  style: [{\n    type: Input\n  }],\n  styleClass: [{\n    type: Input\n  }],\n  enableService: [{\n    type: Input\n  }],\n  key: [{\n    type: Input\n  }],\n  escape: [{\n    type: Input\n  }],\n  severity: [{\n    type: Input\n  }],\n  showTransitionOptions: [{\n    type: Input\n  }],\n  hideTransitionOptions: [{\n    type: Input\n  }],\n  templates: [{\n    type: ContentChildren,\n    args: [PrimeTemplate]\n  }],\n  valueChange: [{\n    type: Output\n  }]\n};\n\nvar MessagesModule = function MessagesModule() {\n  _classCallCheck(this, MessagesModule);\n};\n\nMessagesModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, RippleModule],\n    exports: [Messages],\n    declarations: [Messages]\n  }]\n}];\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Messages, MessagesModule };","map":{"version":3,"sources":["../../src/app/components/messages/messages.ts","../../src/app/components/messages/primeng-messages.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,OnDestroy,Input,Output,EventEmitter,AfterContentInit,Optional,ElementRef,ChangeDetectionStrategy,ContentChildren,QueryList,TemplateRef, ViewEncapsulation, ChangeDetectorRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {trigger,state,style,transition,animate} from '@angular/animations';\nimport {Message,PrimeTemplate,MessageService} from 'primeng/api';\nimport {Subscription} from 'rxjs';\nimport {RippleModule} from 'primeng/ripple';\n\n@Component({\n    selector: 'p-messages',\n    template: `\n        <div class=\"p-messages p-component\" role=\"alert\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <ng-container *ngIf=\"!contentTemplate; else staticMessage\">\n                <div *ngFor=\"let msg of value; let i=index\" [ngClass]=\"'p-message p-message-' + msg.severity\" role=\"alert\" \n                    [@messageAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\">\n                    <div class=\"p-message-wrapper\">\n                        <span class=\"p-message-icon pi\" [ngClass]=\"{'pi-info-circle': msg.severity === 'info', \n                            'pi-check': msg.severity === 'success',\n                            'pi-exclamation-triangle': msg.severity === 'warn',\n                            'pi-times-circle': msg.severity === 'error'}\"></span>\n                        <ng-container *ngIf=\"!escape; else escapeOut\">\n                            <span *ngIf=\"msg.summary\" class=\"p-message-summary\" [innerHTML]=\"msg.summary\"></span>\n                            <span *ngIf=\"msg.detail\" class=\"p-message-detail\" [innerHTML]=\"msg.detail\"></span>\n                        </ng-container>\n                        <ng-template #escapeOut>\n                            <span *ngIf=\"msg.summary\" class=\"p-message-summary\">{{msg.summary}}</span>\n                            <span *ngIf=\"msg.detail\" class=\"p-message-detail\">{{msg.detail}}</span>\n                        </ng-template>\n                        <button class=\"p-message-close p-link\" (click)=\"removeMessage(i)\" *ngIf=\"closable\" type=\"button\" pRipple>\n                            <i class=\"p-message-close-icon pi pi-times\"></i>\n                        </button>\n                    </div>\n                </div>\n            </ng-container>\n            <ng-template #staticMessage>\n                <div [ngClass]=\"'p-message p-message-' + severity\" role=\"alert\">\n                    <div class=\"p-message-wrapper\">\n                        <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n                    </div>\n                </div>\n            </ng-template>\n            </div>\n    `,\n    animations: [\n        trigger('messageAnimation', [\n            transition(':enter', [\n                style({opacity: 0, transform: 'translateY(-25%)'}),\n                animate('{{showTransitionParams}}')\n            ]),\n            transition(':leave', [\n                animate('{{hideTransitionParams}}', style({ height: 0, marginTop: 0, marginBottom: 0, marginLeft: 0, marginRight: 0, overflow: 'hidden', opacity: 0 }))\n            ])\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./messages.css']\n})\nexport class Messages implements AfterContentInit, OnDestroy {\n\n    @Input() value: Message[];\n\n    @Input() closable: boolean = true;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() enableService: boolean = true;\n\n    @Input() key: string;\n\n    @Input() escape: boolean = true;\n\n    @Input() severity: string;\n\n    @Input() showTransitionOptions: string = '300ms ease-out';\n\n    @Input() hideTransitionOptions: string = '200ms cubic-bezier(0.86, 0, 0.07, 1)';\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    @Output() valueChange: EventEmitter<Message[]> = new EventEmitter<Message[]>();\n\n    messageSubscription: Subscription;\n\n    clearSubscription: Subscription;\n\n    contentTemplate: TemplateRef<any>;\n\n    constructor(@Optional() public messageService: MessageService, public el: ElementRef, public cd: ChangeDetectorRef) {}\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'content':\n                    this.contentTemplate = item.template;\n                break;\n\n                default:\n                    this.contentTemplate = item.template;\n                break;\n            }\n        });\n\n        if (this.messageService && this.enableService && !this.contentTemplate) {\n            this.messageSubscription = this.messageService.messageObserver.subscribe((messages: any) => {\n                if (messages) {\n                    if (messages instanceof Array) {\n                        let filteredMessages = messages.filter(m => this.key === m.key);\n                        this.value = this.value ? [...this.value, ...filteredMessages] : [...filteredMessages];\n                    }\n                    else if (this.key === messages.key) {\n                        this.value = this.value ? [...this.value, ...[messages]] : [messages];\n                    }\n\n                    this.cd.markForCheck();\n                }\n            });\n\n            this.clearSubscription = this.messageService.clearObserver.subscribe(key => {\n                if (key) {\n                    if (this.key === key) {\n                        this.value = null;\n                    }\n                }\n                else {\n                    this.value = null;\n                }\n\n                this.cd.markForCheck();\n            });\n        }\n    }\n\n    hasMessages() {\n        let parentEl = this.el.nativeElement.parentElement;\n        if (parentEl && parentEl.offsetParent) {\n            return this.contentTemplate != null || this.value && this.value.length > 0;\n        }\n\n        return false;\n    }\n\n    clear() {\n        this.value = [];\n        this.valueChange.emit(this.value);\n    }\n\n    removeMessage(i: number) {\n        this.value = this.value.filter((msg, index) => index !== i);\n    }\n\n    get icon(): string {\n        const severity = this.severity || (this.hasMessages() ? this.value[0].severity : null);\n\n        if (this.hasMessages()) {\n            switch(severity) {\n                case 'success':\n                    return 'pi-check';\n                break;\n\n                case 'info':\n                    return 'pi-info-circle';\n                break;\n\n                case 'error':\n                    return 'pi-times';\n                break;\n\n                case 'warn':\n                    return 'pi-exclamation-triangle';\n                break;\n\n                default:\n                    return 'pi-info-circle';\n                break;\n            }\n        }\n\n        return null;\n    }\n\n    ngOnDestroy() {\n        if (this.messageSubscription) {\n            this.messageSubscription.unsubscribe();\n        }\n\n        if (this.clearSubscription) {\n            this.clearSubscription.unsubscribe();\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,RippleModule],\n    exports: [Messages],\n    declarations: [Messages]\n})\nexport class MessagesModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}
import { TemplateRef, ViewContainerRef, OnChanges, SimpleChange } from '@angular/core';
import { HttpObservableService } from './interceptors/http-observable.service';
import { RouteInterceptorService } from './interceptors/route-interceptor.service';
import * as ɵngcc0 from '@angular/core';
export interface MkLoadingPage {
    checkPendingHttp: boolean;
    checkPendingRoute: boolean;
}
export declare class LoadingPageDirective implements OnChanges {
    private httpObservableService;
    private routeInterceptorService;
    private templateRef;
    private viewContainer;
    isPendingRequests: boolean;
    isPendingRoute: boolean;
    private hasView;
    mkLoadingPage: MkLoadingPage;
    /**
     * @method constructor
     * @param privatehttpObservableService   [description]
     * @param privaterouteInterceptorService [description]
     * @param privatetemplateRef             [description]
     * @param privateviewContainer           [description]                                              [description]
     */
    constructor(httpObservableService: HttpObservableService, routeInterceptorService: RouteInterceptorService, templateRef: TemplateRef<any>, viewContainer: ViewContainerRef);
    /**
     * @method ngOnChanges
     * @param changes [description]
     */
    ngOnChanges(changes: {
        [propKey: string]: SimpleChange;
    }): void;
    /**
     * [init description]
     * @method init
     * @return [description]
     */
    private init();
    /**
     * [isVisible description]
     * @method isVisible
     * @return [description]
     */
    private isVisible();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LoadingPageDirective, any>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LoadingPageDirective, "[mkLoadingPage]", never, {
    "mkLoadingPage": "mkLoadingPage";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy1wYWdlLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJsb2FkaW5nLXBhZ2UuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3Q0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2UgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBPYnNlcnZhYmxlU2VydmljZSB9IGZyb20gJy4vaW50ZXJjZXB0b3JzL2h0dHAtb2JzZXJ2YWJsZS5zZXJ2aWNlJztcbmltcG9ydCB7IFJvdXRlSW50ZXJjZXB0b3JTZXJ2aWNlIH0gZnJvbSAnLi9pbnRlcmNlcHRvcnMvcm91dGUtaW50ZXJjZXB0b3Iuc2VydmljZSc7XG5leHBvcnQgaW50ZXJmYWNlIE1rTG9hZGluZ1BhZ2Uge1xuICAgIGNoZWNrUGVuZGluZ0h0dHA6IGJvb2xlYW47XG4gICAgY2hlY2tQZW5kaW5nUm91dGU6IGJvb2xlYW47XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMb2FkaW5nUGFnZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gICAgcHJpdmF0ZSBodHRwT2JzZXJ2YWJsZVNlcnZpY2U7XG4gICAgcHJpdmF0ZSByb3V0ZUludGVyY2VwdG9yU2VydmljZTtcbiAgICBwcml2YXRlIHRlbXBsYXRlUmVmO1xuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lcjtcbiAgICBpc1BlbmRpbmdSZXF1ZXN0czogYm9vbGVhbjtcbiAgICBpc1BlbmRpbmdSb3V0ZTogYm9vbGVhbjtcbiAgICBwcml2YXRlIGhhc1ZpZXc7XG4gICAgbWtMb2FkaW5nUGFnZTogTWtMb2FkaW5nUGFnZTtcbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHByaXZhdGVodHRwT2JzZXJ2YWJsZVNlcnZpY2UgICBbZGVzY3JpcHRpb25dXG4gICAgICogQHBhcmFtIHByaXZhdGVyb3V0ZUludGVyY2VwdG9yU2VydmljZSBbZGVzY3JpcHRpb25dXG4gICAgICogQHBhcmFtIHByaXZhdGV0ZW1wbGF0ZVJlZiAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICogQHBhcmFtIHByaXZhdGV2aWV3Q29udGFpbmVyICAgICAgICAgICBbZGVzY3JpcHRpb25dICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihodHRwT2JzZXJ2YWJsZVNlcnZpY2U6IEh0dHBPYnNlcnZhYmxlU2VydmljZSwgcm91dGVJbnRlcmNlcHRvclNlcnZpY2U6IFJvdXRlSW50ZXJjZXB0b3JTZXJ2aWNlLCB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55Piwgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZik7XG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBuZ09uQ2hhbmdlc1xuICAgICAqIEBwYXJhbSBjaGFuZ2VzIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiB7XG4gICAgICAgIFtwcm9wS2V5OiBzdHJpbmddOiBTaW1wbGVDaGFuZ2U7XG4gICAgfSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogW2luaXQgZGVzY3JpcHRpb25dXG4gICAgICogQG1ldGhvZCBpbml0XG4gICAgICogQHJldHVybiBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgcHJpdmF0ZSBpbml0KCk7XG4gICAgLyoqXG4gICAgICogW2lzVmlzaWJsZSBkZXNjcmlwdGlvbl1cbiAgICAgKiBAbWV0aG9kIGlzVmlzaWJsZVxuICAgICAqIEByZXR1cm4gW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIHByaXZhdGUgaXNWaXNpYmxlKCk7XG59XG4iXX0=